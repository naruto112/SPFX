import _map from "lodash/map";
import _times from "lodash/times";
import _invoke from "lodash/invoke";
import { datepickerCalendarBehavior } from '@fluentui/accessibility';
import { addMonths, DateRangeType, DayOfWeek, DAYS_IN_WEEK, FirstWeekOfYear, formatMonthDayYear, formatMonthYear, getDayGrid } from '@fluentui/date-time-utilities';
import { getElementType, useAccessibility, useFluentContext, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';
import { Ref } from '@fluentui/react-component-ref';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { commonPropTypes, createShorthand } from '../../utils';
import { Grid } from '../Grid/Grid';
import { DatepickerCalendarHeader } from './DatepickerCalendarHeader';
import { DatepickerCalendarCell } from './DatepickerCalendarCell';
import { DatepickerCalendarHeaderCell } from './DatepickerCalendarHeaderCell'; // TODO: extract to date-time-utilities

export var DEFAULT_CALENDAR_LOCALIZED_STRINGS = {
  months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
  shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
  days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
  shortDays: ['S', 'M', 'T', 'W', 'T', 'F', 'S']
}; // TODO: extract to date-time-utilities

export var datepickerCalendarClassName = 'ui-datepicker__calendar';
/**
 * A DatepickerCalendar is used to display dates in sematically grouped way.
 */

export var DatepickerCalendar = /*#__PURE__*/function () {
  var DatepickerCalendar = function DatepickerCalendar(props) {
    var context = useFluentContext();

    var _useTelemetry = useTelemetry(DatepickerCalendar.displayName, context.telemetry),
        setStart = _useTelemetry.setStart,
        setEnd = _useTelemetry.setEnd;

    setStart();
    var datepickerCalendarRef = React.useRef();
    var className = props.className,
        design = props.design,
        styles = props.styles,
        variables = props.variables,
        calendarHeaderCell = props.calendarHeaderCell,
        calendarCell = props.calendarCell,
        header = props.header,
        selectedDate = props.selectedDate,
        navigatedDate = props.navigatedDate,
        firstDayOfWeek = props.firstDayOfWeek,
        firstWeekOfYear = props.firstWeekOfYear,
        dateRangeType = props.dateRangeType,
        weeksToShow = props.weeksToShow,
        localizedStrings = props.localizedStrings,
        today = props.today,
        onDateChange = props.onDateChange;
    var ElementType = getElementType(props);
    var unhandledProps = useUnhandledProps(DatepickerCalendar.handledProps, props);
    var getA11yProps = useAccessibility(props.accessibility, {
      debugName: DatepickerCalendar.displayName,
      actionHandlers: {},
      rtl: context.rtl
    });
    var normalizedSelectedDate = selectedDate || today || new Date();

    var _React$useState = React.useState(navigatedDate || today || new Date()),
        gridNavigatedDate = _React$useState[0],
        setGridNavigatedDate = _React$useState[1];

    var _useStyles = useStyles(DatepickerCalendar.displayName, {
      className: datepickerCalendarClassName,
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          design: design,
          styles: styles,
          variables: variables
        };
      },
      rtl: context.rtl
    }),
        classes = _useStyles.classes;
    /** Get days grid and slice it in case it contains additional weeks at the beginning and end. */


    var getSlicedGrid = function getSlicedGrid() {
      var gridOptions = {
        selectedDate: normalizedSelectedDate,
        navigatedDate: gridNavigatedDate,
        firstDayOfWeek: firstDayOfWeek,
        firstWeekOfYear: firstWeekOfYear,
        dateRangeType: dateRangeType
      };
      var grid = getDayGrid(gridOptions);

      if (!weeksToShow) {
        // Slicing because grid contains extra 1 week in the front and in the back.
        return grid.slice(1, grid.length - 1);
      }

      return grid;
    };

    var grid = getSlicedGrid();

    var changeMonth = function changeMonth(nextMonth) {
      var updatedGridNavigatedDate = addMonths(gridNavigatedDate, nextMonth ? 1 : -1);
      setGridNavigatedDate(updatedGridNavigatedDate);
    };

    var element = /*#__PURE__*/React.createElement(Ref, {
      innerRef: datepickerCalendarRef
    }, getA11yProps.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
      className: classes.root
    }, unhandledProps)), createShorthand(DatepickerCalendarHeader, header, {
      defaultProps: function defaultProps() {
        return {
          label: formatMonthYear(gridNavigatedDate, localizedStrings)
        };
      },
      overrideProps: function overrideProps(predefinedProps) {
        return {
          onPreviousClick: function onPreviousClick(e, data) {
            changeMonth(false);

            _invoke(predefinedProps, 'onPreviousClick', e, data);
          },
          onNextClick: function onNextClick(e, data) {
            changeMonth(true);

            _invoke(predefinedProps, 'onNextClick', e, data);
          }
        };
      }
    }), /*#__PURE__*/React.createElement(Grid, {
      rows: grid.length + 1,
      columns: DAYS_IN_WEEK
    }, _times(DAYS_IN_WEEK, function (dayNumber) {
      return createShorthand(DatepickerCalendarHeaderCell, calendarHeaderCell, {
        defaultProps: function defaultProps() {
          return getA11yProps('calendarHeaderCell', {
            content: localizedStrings.shortDays[(dayNumber + firstDayOfWeek) % DAYS_IN_WEEK],
            key: dayNumber
          });
        }
      });
    }), _map(grid, function (week) {
      return _map(week, function (day) {
        return createShorthand(DatepickerCalendarCell, calendarCell, {
          defaultProps: function defaultProps() {
            return getA11yProps('calendarCell', {
              content: day.date,
              key: day.key,
              'aria-label': formatMonthDayYear(day.originalDate, localizedStrings),
              primary: day.isSelected,
              disabled: !day.isInMonth
            });
          },
          overrideProps: function overrideProps(predefinedProps) {
            return {
              onClick: function onClick(e) {
                onDateChange(e, Object.assign({}, predefinedProps, {
                  value: day
                }));

                _invoke(predefinedProps, 'onClick', e, Object.assign({}, predefinedProps, {
                  value: day
                }));
              }
            };
          }
        });
      });
    })))));
    setEnd();
    return element;
  };

  DatepickerCalendar.displayName = 'DatepickerCalendar';
  DatepickerCalendar.propTypes = Object.assign({}, commonPropTypes.createCommon(), {
    calendarCell: customPropTypes.itemShorthand,
    calendarHeaderCell: customPropTypes.itemShorthand,
    header: customPropTypes.itemShorthand,
    onDateChange: PropTypes.func,
    localizedStrings: PropTypes.object,
    selectedDate: PropTypes.instanceOf(Date),
    navigatedDate: PropTypes.instanceOf(Date),
    minDate: PropTypes.instanceOf(Date),
    maxDate: PropTypes.instanceOf(Date),
    restrictedDates: PropTypes.arrayOf(PropTypes.instanceOf(Date)),
    firstDayOfWeek: PropTypes.oneOf(Object.keys(DayOfWeek).map(function (name) {
      return DayOfWeek[name];
    })),
    firstWeekOfYear: PropTypes.oneOf(Object.keys(FirstWeekOfYear).map(function (name) {
      return FirstWeekOfYear[name];
    })),
    dateRangeType: PropTypes.oneOf(Object.keys(DateRangeType).map(function (name) {
      return DateRangeType[name];
    })),
    daysToSelectInDayView: PropTypes.number,
    today: PropTypes.instanceOf(Date),
    showWeekNumbers: PropTypes.bool,
    workWeekDays: PropTypes.arrayOf(PropTypes.oneOf(Object.keys(DayOfWeek).map(function (name) {
      return DayOfWeek[name];
    }))),
    format: PropTypes.func,
    parse: PropTypes.func
  });
  DatepickerCalendar.defaultProps = {
    accessibility: datepickerCalendarBehavior,
    firstDayOfWeek: DayOfWeek.Monday,
    firstWeekOfYear: FirstWeekOfYear.FirstDay,
    dateRangeType: DateRangeType.Day,
    header: {},
    calendarCell: {},
    calendarHeaderCell: {},
    localizedStrings: DEFAULT_CALENDAR_LOCALIZED_STRINGS
  };
  DatepickerCalendar.handledProps = Object.keys(DatepickerCalendar.propTypes);
  return DatepickerCalendar;
}();
//# sourceMappingURL=DatepickerCalendar.js.map
