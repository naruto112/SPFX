{"version":3,"sources":["components/Datepicker/DatepickerCalendar.tsx"],"names":["datepickerCalendarBehavior","addMonths","DateRangeType","DayOfWeek","DAYS_IN_WEEK","FirstWeekOfYear","formatMonthDayYear","formatMonthYear","getDayGrid","getElementType","useAccessibility","useFluentContext","useStyles","useTelemetry","useUnhandledProps","Ref","customPropTypes","PropTypes","React","commonPropTypes","createShorthand","Grid","DatepickerCalendarHeader","DatepickerCalendarCell","DatepickerCalendarHeaderCell","DEFAULT_CALENDAR_LOCALIZED_STRINGS","months","shortMonths","days","shortDays","datepickerCalendarClassName","DatepickerCalendar","props","context","displayName","telemetry","setStart","setEnd","datepickerCalendarRef","useRef","className","design","styles","variables","calendarHeaderCell","calendarCell","header","selectedDate","navigatedDate","firstDayOfWeek","firstWeekOfYear","dateRangeType","weeksToShow","localizedStrings","today","onDateChange","ElementType","unhandledProps","handledProps","getA11yProps","accessibility","debugName","actionHandlers","rtl","normalizedSelectedDate","Date","useState","gridNavigatedDate","setGridNavigatedDate","mapPropsToInlineStyles","classes","getSlicedGrid","gridOptions","grid","slice","length","changeMonth","nextMonth","updatedGridNavigatedDate","element","unstable_wrapWithFocusZone","root","defaultProps","label","overrideProps","predefinedProps","onPreviousClick","e","data","onNextClick","dayNumber","content","key","week","day","date","originalDate","primary","isSelected","disabled","isInMonth","onClick","value","propTypes","createCommon","itemShorthand","func","object","instanceOf","minDate","maxDate","restrictedDates","arrayOf","oneOf","Object","keys","map","name","daysToSelectInDayView","number","showWeekNumbers","bool","workWeekDays","format","parse","Monday","FirstDay","Day"],"mappings":"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","sourcesContent":["import { Accessibility, datepickerCalendarBehavior, DatepickerCalendarBehaviorProps } from '@fluentui/accessibility';\nimport {\n  addMonths,\n  DateRangeType,\n  DayOfWeek,\n  DAYS_IN_WEEK,\n  FirstWeekOfYear,\n  formatMonthDayYear,\n  formatMonthYear,\n  getDayGrid,\n  IDateGridStrings,\n  IDay,\n  IRestrictedDatesOptions,\n} from '@fluentui/date-time-utilities';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { ComponentEventHandler, FluentComponentStaticProps, ShorthandValue } from '../../types';\nimport { commonPropTypes, createShorthand, UIComponentProps } from '../../utils';\nimport { Grid } from '../Grid/Grid';\nimport { DatepickerCalendarHeader, DatepickerCalendarHeaderProps } from './DatepickerCalendarHeader';\nimport { DatepickerCalendarCellProps, DatepickerCalendarCell } from './DatepickerCalendarCell';\nimport { DatepickerCalendarHeaderCellProps, DatepickerCalendarHeaderCell } from './DatepickerCalendarHeaderCell';\n\n// TODO: extract to date-time-utilities\nexport const DEFAULT_CALENDAR_LOCALIZED_STRINGS: IDateGridStrings = {\n  months: [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ],\n  shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  shortDays: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n};\n\n// TODO: extract to date-time-utilities\nexport interface IDateCalendarFormatting {\n  /**\n   * Format the date according to specified function.\n   * Intended use case is localization.\n   */\n  format?: (date: Date) => string;\n\n  /**\n   * Parse date from string representation into Date type.\n   */\n  parse?: (date: string) => Date;\n}\n\n// TODO: extract to date-time-utilities\nexport interface IDatepickerCalendarOptions extends IRestrictedDatesOptions {\n  /**\n   * The first day of the week for your locale.\n   */\n  firstDayOfWeek?: DayOfWeek;\n\n  /**\n   * Defines when the first week of the year should start, FirstWeekOfYear.FirstDay,\n   * FirstWeekOfYear.FirstFullWeek or FirstWeekOfYear.FirstFourDayWeek are the possible values\n   */\n  firstWeekOfYear?: FirstWeekOfYear;\n\n  /**\n   * The date range type indicating how  many days should be selected as the user\n   * selects days\n   */\n  dateRangeType?: DateRangeType;\n\n  /**\n   * The number of days to select while dateRangeType === DateRangeType.Day. Used in order to have multi-day\n   * views.\n   */\n  daysToSelectInDayView?: number;\n\n  /**\n   * Value of today. If null, current time in client machine will be used.\n   */\n  today?: Date;\n\n  /**\n   * Whether the calendar should show the week number (weeks 1 to 53) before each week row\n   */\n  showWeekNumbers?: boolean;\n\n  /**\n   * The days that are selectable when `dateRangeType` is WorkWeek.\n   * If `dateRangeType` is not WorkWeek this property does nothing.\n   */\n  workWeekDays?: DayOfWeek[];\n}\n\nexport interface DatepickerCalendarProps extends IDatepickerCalendarOptions, IDateCalendarFormatting, UIComponentProps {\n  /** Calendar can have header. */\n  header?: ShorthandValue<DatepickerCalendarHeaderProps>;\n\n  /** A render function to customize how cells are rendered in the Calendar. */\n  calendarCell?: ShorthandValue<DatepickerCalendarCellProps>;\n\n  /** A render function to customize how header cells are rendered in the Calendar. */\n  calendarHeaderCell?: ShorthandValue<DatepickerCalendarHeaderCellProps>;\n\n  /**\n   * The currently selected date\n   */\n  selectedDate?: Date;\n  /**\n   * The currently navigated date\n   */\n  navigatedDate?: Date;\n\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<DatepickerCalendarBehaviorProps>;\n\n  /**\n   * Called on change of the date.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onDateChange?: ComponentEventHandler<DatepickerCalendarProps & { value: IDay }>;\n\n  /** Localized labels */\n  localizedStrings?: IDateGridStrings;\n}\n\nexport type DatepickerCalendarStylesProps = never;\n\nexport const datepickerCalendarClassName = 'ui-datepicker__calendar';\n\n/**\n * A DatepickerCalendar is used to display dates in sematically grouped way.\n */\nexport const DatepickerCalendar: ComponentWithAs<'div', DatepickerCalendarProps> &\n  FluentComponentStaticProps<DatepickerCalendarProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(DatepickerCalendar.displayName, context.telemetry);\n  setStart();\n  const datepickerCalendarRef = React.useRef<HTMLElement>();\n\n  const {\n    className,\n    design,\n    styles,\n    variables,\n    calendarHeaderCell,\n    calendarCell,\n    header,\n    selectedDate,\n    navigatedDate,\n    firstDayOfWeek,\n    firstWeekOfYear,\n    dateRangeType,\n    weeksToShow,\n    localizedStrings,\n    today,\n    onDateChange,\n  } = props;\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(DatepickerCalendar.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: DatepickerCalendar.displayName,\n    actionHandlers: {},\n    rtl: context.rtl,\n  });\n  const normalizedSelectedDate = selectedDate || today || new Date();\n\n  const [gridNavigatedDate, setGridNavigatedDate] = React.useState<Date>(navigatedDate || today || new Date());\n\n  const { classes } = useStyles<DatepickerCalendarStylesProps>(DatepickerCalendar.displayName, {\n    className: datepickerCalendarClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  /** Get days grid and slice it in case it contains additional weeks at the beginning and end. */\n  const getSlicedGrid = () => {\n    const gridOptions = {\n      selectedDate: normalizedSelectedDate,\n      navigatedDate: gridNavigatedDate,\n      firstDayOfWeek,\n      firstWeekOfYear,\n      dateRangeType,\n    };\n    const grid = getDayGrid(gridOptions);\n    if (!weeksToShow) {\n      // Slicing because grid contains extra 1 week in the front and in the back.\n      return grid.slice(1, grid.length - 1);\n    }\n    return grid;\n  };\n\n  const grid = getSlicedGrid();\n\n  const changeMonth = (nextMonth: boolean) => {\n    const updatedGridNavigatedDate = addMonths(gridNavigatedDate, nextMonth ? 1 : -1);\n    setGridNavigatedDate(updatedGridNavigatedDate);\n  };\n\n  const element = (\n    <Ref innerRef={datepickerCalendarRef}>\n      {getA11yProps.unstable_wrapWithFocusZone(\n        <ElementType\n          {...getA11yProps('root', {\n            className: classes.root,\n            ...unhandledProps,\n          })}\n        >\n          {createShorthand(DatepickerCalendarHeader, header, {\n            defaultProps: () => ({\n              label: formatMonthYear(gridNavigatedDate, localizedStrings),\n            }),\n            overrideProps: (predefinedProps: DatepickerCalendarHeaderProps): DatepickerCalendarHeaderProps => ({\n              onPreviousClick: (e, data) => {\n                changeMonth(false);\n                _.invoke(predefinedProps, 'onPreviousClick', e, data);\n              },\n              onNextClick: (e, data) => {\n                changeMonth(true);\n                _.invoke(predefinedProps, 'onNextClick', e, data);\n              },\n            }),\n          })}\n          <Grid rows={grid.length + 1} columns={DAYS_IN_WEEK}>\n            {_.times(DAYS_IN_WEEK, dayNumber =>\n              createShorthand(DatepickerCalendarHeaderCell, calendarHeaderCell, {\n                defaultProps: () =>\n                  getA11yProps('calendarHeaderCell', {\n                    content: localizedStrings.shortDays[(dayNumber + firstDayOfWeek) % DAYS_IN_WEEK],\n                    key: dayNumber,\n                  }),\n              }),\n            )}\n            {_.map(grid, week =>\n              _.map(week, (day: IDay) =>\n                createShorthand(DatepickerCalendarCell, calendarCell, {\n                  defaultProps: () =>\n                    getA11yProps('calendarCell', {\n                      content: day.date,\n                      key: day.key,\n                      'aria-label': formatMonthDayYear(day.originalDate, localizedStrings),\n                      primary: day.isSelected,\n                      disabled: !day.isInMonth,\n                    }),\n                  overrideProps: (predefinedProps: DatepickerCalendarCellProps): DatepickerCalendarCellProps => ({\n                    onClick: e => {\n                      onDateChange(e, { ...predefinedProps, value: day });\n                      _.invoke(predefinedProps, 'onClick', e, { ...predefinedProps, value: day });\n                    },\n                  }),\n                }),\n              ),\n            )}\n          </Grid>\n        </ElementType>,\n      )}\n    </Ref>\n  );\n  setEnd();\n  return element;\n};\n\nDatepickerCalendar.displayName = 'DatepickerCalendar';\n\nDatepickerCalendar.propTypes = {\n  ...commonPropTypes.createCommon(),\n  calendarCell: customPropTypes.itemShorthand,\n  calendarHeaderCell: customPropTypes.itemShorthand,\n  header: customPropTypes.itemShorthand,\n  onDateChange: PropTypes.func,\n  localizedStrings: PropTypes.object as PropTypes.Validator<IDateGridStrings>,\n  selectedDate: PropTypes.instanceOf(Date),\n  navigatedDate: PropTypes.instanceOf(Date),\n\n  minDate: PropTypes.instanceOf(Date),\n  maxDate: PropTypes.instanceOf(Date),\n  restrictedDates: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n\n  firstDayOfWeek: PropTypes.oneOf(Object.keys(DayOfWeek).map(name => DayOfWeek[name])),\n  firstWeekOfYear: PropTypes.oneOf(Object.keys(FirstWeekOfYear).map(name => FirstWeekOfYear[name])),\n  dateRangeType: PropTypes.oneOf(Object.keys(DateRangeType).map(name => DateRangeType[name])),\n  daysToSelectInDayView: PropTypes.number,\n  today: PropTypes.instanceOf(Date),\n  showWeekNumbers: PropTypes.bool,\n  workWeekDays: PropTypes.arrayOf(PropTypes.oneOf(Object.keys(DayOfWeek).map(name => DayOfWeek[name]))),\n\n  format: PropTypes.func,\n  parse: PropTypes.func,\n};\n\nDatepickerCalendar.defaultProps = {\n  accessibility: datepickerCalendarBehavior,\n  firstDayOfWeek: DayOfWeek.Monday,\n  firstWeekOfYear: FirstWeekOfYear.FirstDay,\n  dateRangeType: DateRangeType.Day,\n  header: {},\n  calendarCell: {},\n  calendarHeaderCell: {},\n  localizedStrings: DEFAULT_CALENDAR_LOCALIZED_STRINGS,\n};\n\nDatepickerCalendar.handledProps = Object.keys(DatepickerCalendar.propTypes) as any;\n"],"file":"DatepickerCalendar.js"}