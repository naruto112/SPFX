import { Accessibility, DatepickerBehaviorProps } from '@fluentui/accessibility';
import { DateRangeType, DayOfWeek, FirstWeekOfYear, IDateGridStrings, IDay, IRestrictedDatesOptions } from '@fluentui/date-time-utilities';
import { ComponentWithAs } from '@fluentui/react-bindings';
import { ComponentEventHandler, FluentComponentStaticProps, ShorthandValue } from '../../types';
import { UIComponentProps } from '../../utils';
import { PopupProps } from '../Popup/Popup';
import { DatepickerCalendar, DatepickerCalendarProps } from './DatepickerCalendar';
import { DatepickerCalendarCell } from './DatepickerCalendarCell';
import { DatepickerCalendarHeader } from './DatepickerCalendarHeader';
import { DatepickerCalendarHeaderAction } from './DatepickerCalendarHeaderAction';
import { DatepickerCalendarHeaderCell } from './DatepickerCalendarHeaderCell';
export declare const DEFAULT_LOCALIZED_STRINGS: IDateGridStrings;
export interface IDateFormatting {
    /**
     * Format the date according to specified function.
     * Intended use case is localization.
     */
    format?: (date: Date) => string;
    /**
     * Parse date from string representation into Date type.
     */
    parse?: (date: string) => Date;
}
export interface IDatepickerOptions extends IRestrictedDatesOptions {
    /**
     * The first day of the week for your locale.
     */
    firstDayOfWeek?: DayOfWeek;
    /**
     * Defines when the first week of the year should start, FirstWeekOfYear.FirstDay,
     * FirstWeekOfYear.FirstFullWeek or FirstWeekOfYear.FirstFourDayWeek are the possible values
     */
    firstWeekOfYear?: FirstWeekOfYear;
    /**
     * The date range type indicating how  many days should be selected as the user
     * selects days
     */
    dateRangeType?: DateRangeType;
    /**
     * The number of days to select while dateRangeType === DateRangeType.Day. Used in order to have multi-day
     * views.
     */
    daysToSelectInDayView?: number;
    /**
     * Value of today. If null, current time in client machine will be used.
     */
    today?: Date;
    /**
     * Whether the calendar should show the week number (weeks 1 to 53) before each week row
     */
    showWeekNumbers?: boolean;
    /**
     * The days that are selectable when `dateRangeType` is WorkWeek.
     * If `dateRangeType` is not WorkWeek this property does nothing.
     */
    workWeekDays?: DayOfWeek[];
}
export interface DatepickerProps extends IDatepickerOptions, IDateFormatting, UIComponentProps {
    /** Accessibility behavior if overridden by the user. */
    accessibility?: Accessibility<DatepickerBehaviorProps>;
    /** Shorthand for the datepicker calendar. */
    calendar?: ShorthandValue<DatepickerCalendarProps>;
    /** Shorthand for the datepicker popup. */
    popup?: ShorthandValue<PopupProps>;
    /** Datepicker shows it is currently unable to be interacted with. */
    disabled?: boolean;
    /** Datepicker shows it is currently unable to be interacted with. */
    isRequired?: boolean;
    /**
     * Called on change of the date.
     *
     * @param event - React's original SyntheticEvent.
     * @param data - All props and proposed value.
     */
    onDateChange?: ComponentEventHandler<DatepickerProps & {
        value: IDay;
    }>;
    /** String to render for button to direct the user to today's date. */
    goToToday?: string;
    /** Text placeholder for the input field. */
    placeholder?: string;
    /** Localized labels */
    localizedStrings?: IDateGridStrings;
}
export declare type DatepickerStylesProps = never;
export declare const datepickerClassName = "ui-datepicker";
/**
 * A Datepicker is used to display dates.
 * This component is currently UNSTABLE!
 */
export declare const Datepicker: ComponentWithAs<'div', DatepickerProps> & FluentComponentStaticProps<DatepickerProps> & {
    Calendar: typeof DatepickerCalendar;
    CalendarHeader: typeof DatepickerCalendarHeader;
    CalendarHeaderAction: typeof DatepickerCalendarHeaderAction;
    CalendarHeaderCell: typeof DatepickerCalendarHeaderCell;
    CalendarCell: typeof DatepickerCalendarCell;
};
