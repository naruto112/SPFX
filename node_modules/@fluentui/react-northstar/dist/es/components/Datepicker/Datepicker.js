import _invoke from "lodash/invoke";
import { datepickerBehavior } from '@fluentui/accessibility';
import { DateRangeType, DayOfWeek, FirstWeekOfYear, formatMonthDayYear } from '@fluentui/date-time-utilities';
import { getElementType, useAccessibility, useFluentContext, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';
import { Ref } from '@fluentui/react-component-ref';
import { CalendarIcon } from '@fluentui/react-icons-northstar';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { commonPropTypes, createShorthand, createShorthandFactory } from '../../utils';
import { Button } from '../Button/Button';
import { Input } from '../Input/Input';
import { Popup } from '../Popup/Popup';
import { DatepickerCalendar } from './DatepickerCalendar';
import { DatepickerCalendarCell } from './DatepickerCalendarCell';
import { DatepickerCalendarHeader } from './DatepickerCalendarHeader';
import { DatepickerCalendarHeaderAction } from './DatepickerCalendarHeaderAction';
import { DatepickerCalendarHeaderCell } from './DatepickerCalendarHeaderCell'; // TODO: extract to date-time-utilities

export var DEFAULT_LOCALIZED_STRINGS = {
  months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
  shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
  days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
  shortDays: ['S', 'M', 'T', 'W', 'T', 'F', 'S']
}; // TODO: extract to date-time-utilities

export var datepickerClassName = 'ui-datepicker';
/**
 * A Datepicker is used to display dates.
 * This component is currently UNSTABLE!
 */

export var Datepicker = /*#__PURE__*/function () {
  var Datepicker = function Datepicker(props) {
    var _ref, _ref2;

    var context = useFluentContext();

    var _useTelemetry = useTelemetry(Datepicker.displayName, context.telemetry),
        setStart = _useTelemetry.setStart,
        setEnd = _useTelemetry.setEnd;

    setStart();
    var datepickerRef = React.useRef();

    var _React$useState = React.useState(false),
        open = _React$useState[0],
        setOpen = _React$useState[1];

    var _React$useState2 = React.useState(),
        selectedDate = _React$useState2[0],
        setSelectedDate = _React$useState2[1];

    var valueFormatter = function valueFormatter(date) {
      return date ? formatMonthDayYear(date, DEFAULT_LOCALIZED_STRINGS) : '';
    };

    var firstDayOfWeek = props.firstDayOfWeek,
        firstWeekOfYear = props.firstWeekOfYear,
        dateRangeType = props.dateRangeType,
        calendar = props.calendar,
        popup = props.popup,
        className = props.className,
        design = props.design,
        styles = props.styles,
        variables = props.variables;
    var calendarOptions = {
      selectedDate: (_ref = selectedDate != null ? selectedDate : props.today) != null ? _ref : new Date(),
      navigatedDate: (_ref2 = selectedDate != null ? selectedDate : props.today) != null ? _ref2 : new Date(),
      firstDayOfWeek: firstDayOfWeek,
      firstWeekOfYear: firstWeekOfYear,
      dateRangeType: dateRangeType
    };

    var showCalendarGrid = function showCalendarGrid() {
      setOpen(true);
    };

    var ElementType = getElementType(props);
    var unhandledProps = useUnhandledProps(Datepicker.handledProps, props);
    var getA11yProps = useAccessibility(props.accessibility, {
      debugName: Datepicker.displayName,
      actionHandlers: {},
      rtl: context.rtl
    });

    var _useStyles = useStyles(Datepicker.displayName, {
      className: datepickerClassName,
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          design: design,
          styles: styles,
          variables: variables
        };
      },
      rtl: context.rtl
    }),
        classes = _useStyles.classes;

    var overrideDatepickerCalendarProps = function overrideDatepickerCalendarProps(predefinedProps) {
      return Object.assign({}, calendarOptions, {
        onDateChange: function onDateChange(e, itemProps) {
          setSelectedDate(itemProps.value.originalDate);
          setOpen(false);

          _invoke(predefinedProps, 'onDateChange', e, itemProps);
        }
      });
    };

    var calendarElement = createShorthand(DatepickerCalendar, calendar, {
      defaultProps: function defaultProps() {
        return getA11yProps('calendar', {});
      },
      overrideProps: overrideDatepickerCalendarProps
    });
    var element = /*#__PURE__*/React.createElement(Ref, {
      innerRef: datepickerRef
    }, getA11yProps.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
      className: classes.root
    }, unhandledProps)), /*#__PURE__*/React.createElement(Input, {
      readOnly: true,
      onClick: showCalendarGrid,
      value: valueFormatter(selectedDate)
    }), createShorthand(Popup, popup, {
      defaultProps: function defaultProps() {
        return {
          open: open,
          content: calendarElement,
          trapFocus: true,
          trigger: /*#__PURE__*/React.createElement(Button, {
            icon: /*#__PURE__*/React.createElement(CalendarIcon, null),
            title: "Open calendar",
            iconOnly: true
          })
        };
      },
      overrideProps: function overrideProps(predefinedProps) {
        return {
          onOpenChange: function onOpenChange(e, _ref3) {
            var open = _ref3.open;
            setOpen(open);

            _invoke(predefinedProps, 'onOpenChange', e, {
              open: open
            });
          }
        };
      }
    }))));
    setEnd();
    return element;
  };

  Datepicker.displayName = 'Datepicker';
  Datepicker.propTypes = Object.assign({}, commonPropTypes.createCommon(), {
    calendar: customPropTypes.itemShorthand,
    popup: customPropTypes.itemShorthand,
    minDate: PropTypes.instanceOf(Date),
    maxDate: PropTypes.instanceOf(Date),
    restrictedDates: PropTypes.arrayOf(PropTypes.instanceOf(Date)),
    firstDayOfWeek: PropTypes.oneOf(Object.keys(DayOfWeek).map(function (name) {
      return DayOfWeek[name];
    })),
    firstWeekOfYear: PropTypes.oneOf(Object.keys(FirstWeekOfYear).map(function (name) {
      return FirstWeekOfYear[name];
    })),
    dateRangeType: PropTypes.oneOf(Object.keys(DateRangeType).map(function (name) {
      return DateRangeType[name];
    })),
    daysToSelectInDayView: PropTypes.number,
    today: PropTypes.instanceOf(Date),
    showWeekNumbers: PropTypes.bool,
    workWeekDays: PropTypes.arrayOf(PropTypes.oneOf(Object.keys(DayOfWeek).map(function (name) {
      return DayOfWeek[name];
    }))),
    localizedStrings: PropTypes.object,
    format: PropTypes.func,
    parse: PropTypes.func,
    disabled: PropTypes.bool,
    isRequired: PropTypes.bool,
    onDateChange: PropTypes.func,
    goToToday: PropTypes.string,
    placeholder: PropTypes.string
  });
  Datepicker.defaultProps = {
    accessibility: datepickerBehavior,
    calendar: {},
    popup: {},
    firstDayOfWeek: DayOfWeek.Monday,
    firstWeekOfYear: FirstWeekOfYear.FirstDay,
    dateRangeType: DateRangeType.Day
  };
  Datepicker.handledProps = Object.keys(Datepicker.propTypes);
  Datepicker.create = createShorthandFactory({
    Component: Datepicker
  });
  Datepicker.Calendar = DatepickerCalendar;
  Datepicker.CalendarHeader = DatepickerCalendarHeader;
  Datepicker.CalendarHeaderAction = DatepickerCalendarHeaderAction;
  Datepicker.CalendarHeaderCell = DatepickerCalendarHeaderCell;
  Datepicker.CalendarCell = DatepickerCalendarCell;
  return Datepicker;
}();
//# sourceMappingURL=Datepicker.js.map
