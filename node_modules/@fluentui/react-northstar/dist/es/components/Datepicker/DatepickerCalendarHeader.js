import _invoke from "lodash/invoke";
import * as React from 'react';
import { datepickerCalendarHeaderBehavior } from '@fluentui/accessibility';
import { getElementType, useAccessibility, useFluentContext, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import { commonPropTypes, createShorthand, createShorthandFactory } from '../../utils';
import { DatepickerCalendarHeaderAction } from './DatepickerCalendarHeaderAction';
import { Text } from '../Text/Text';
export var datepickerCalendarHeaderClassName = 'ui-datepicker__calendarheader';
/**
 * A DatepickerCalendarHeader is used to display header block above calendar grid.
 * This component is currently UNSTABLE!
 */

export var DatepickerCalendarHeader = /*#__PURE__*/function () {
  var DatepickerCalendarHeader = function DatepickerCalendarHeader(props) {
    var context = useFluentContext();

    var _useTelemetry = useTelemetry(DatepickerCalendarHeader.displayName, context.telemetry),
        setStart = _useTelemetry.setStart,
        setEnd = _useTelemetry.setEnd;

    setStart();
    var className = props.className,
        design = props.design,
        styles = props.styles,
        variables = props.variables,
        label = props.label,
        nextButton = props.nextButton,
        previousButton = props.previousButton,
        onPreviousClick = props.onPreviousClick,
        onNextClick = props.onNextClick;
    var ElementType = getElementType(props);
    var unhandledProps = useUnhandledProps(DatepickerCalendarHeader.handledProps, props);
    var getA11yProps = useAccessibility(props.accessibility, {
      debugName: DatepickerCalendarHeader.displayName,
      actionHandlers: {},
      rtl: context.rtl
    });

    var _useStyles = useStyles(DatepickerCalendarHeader.displayName, {
      className: datepickerCalendarHeaderClassName,
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          design: design,
          styles: styles,
          variables: variables
        };
      },
      rtl: context.rtl
    }),
        classes = _useStyles.classes;

    var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
      className: classes.root
    }, unhandledProps)), createShorthand(Text, label), createShorthand(DatepickerCalendarHeaderAction, previousButton, {
      defaultProps: function defaultProps() {
        return getA11yProps('previousButton', {
          icon: {},
          // TODO: use value from `localizationStrings` after #14058 implements needed values
          title: 'Previous Month',
          direction: 'previous'
        });
      },
      overrideProps: function overrideProps(predefinedProps) {
        return {
          onClick: function onClick(e, data) {
            onPreviousClick(e, data);

            _invoke(predefinedProps, 'onClick', e, data);
          }
        };
      }
    }), createShorthand(DatepickerCalendarHeaderAction, nextButton, {
      defaultProps: function defaultProps() {
        return getA11yProps('nextButton', {
          icon: {},
          // TODO: use value from `localizationStrings` after #14058 implements needed values
          title: 'Next Month',
          direction: 'next'
        });
      },
      overrideProps: function overrideProps(predefinedProps) {
        return {
          onClick: function onClick(e, data) {
            onNextClick(e, data);

            _invoke(predefinedProps, 'onClick', e, data);
          }
        };
      }
    }));
    setEnd();
    return element;
  };

  DatepickerCalendarHeader.displayName = 'DatepickerCalendarHeader';
  DatepickerCalendarHeader.propTypes = Object.assign({}, commonPropTypes.createCommon(), {
    label: customPropTypes.itemShorthand,
    localizedStrings: PropTypes.object,
    nextButton: customPropTypes.itemShorthand,
    previousButton: customPropTypes.itemShorthand,
    onPreviousClick: PropTypes.func,
    onNextClick: PropTypes.func
  });
  DatepickerCalendarHeader.defaultProps = {
    accessibility: datepickerCalendarHeaderBehavior,
    nextButton: {},
    previousButton: {},
    label: {}
  };
  DatepickerCalendarHeader.handledProps = Object.keys(DatepickerCalendarHeader.propTypes);
  DatepickerCalendarHeader.create = createShorthandFactory({
    Component: DatepickerCalendarHeader
  });
  return DatepickerCalendarHeader;
}();
//# sourceMappingURL=DatepickerCalendarHeader.js.map
