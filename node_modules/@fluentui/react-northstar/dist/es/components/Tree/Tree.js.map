{"version":3,"sources":["components/Tree/Tree.tsx"],"names":["treeBehavior","getNextElement","useAutoControlled","useTelemetry","useUnhandledProps","getElementType","useAccessibility","useStyles","useFluentContext","customPropTypes","PropTypes","React","Ref","TreeItem","TreeTitle","childrenExist","commonPropTypes","createShorthandFactory","rtlTextContainer","getAllSelectableChildrenId","isAllGroupChecked","hasSubtree","removeItemAtIndex","getSiblings","TreeContext","processItemsForSelection","treeClassName","useStableProps","props","stableProps","useRef","useEffect","current","expandedItemsGenerator","items","acc","item","indexOf","push","iterateItems","Tree","context","displayName","telemetry","setStart","setEnd","exclusive","renderItemTitle","selectable","children","renderedItems","className","design","styles","variables","ElementType","unhandledProps","handledProps","defaultValue","defaultActiveItemIds","value","activeItemIds","initialValue","setActiveItemIdsState","defaultSelectedItemIds","selectedItemIds","setSelectedItemIdsState","getA11yProps","accessibility","debugName","rtl","mapPropsToInlineStyles","classes","treeRef","itemsRef","Map","onFocusParent","useCallback","parent","parentRef","get","focus","setSelectedItemIds","e","updateSelectedItemIds","setActiveItemIds","updateActiveItemIds","expandItems","treeItemProps","id","currActiveItemIds","siblings","activeItemIdIndex","nextActiveItemsIds","some","sibling","activeSiblingIdIndex","onTitleClick","executeSelection","treeItemHasSubtree","target","currentTarget","selectableParent","expanded","currSelectedItemIds","onFocusFirstChild","itemId","currentElement","elementToBeFocused","isActiveItem","onSiblingsExpand","forEach","isIndeterminate","selectableItemIds","isSelectedItem","contextValue","useMemo","renderContent","renderItems","level","reduce","index","isSubtree","isSubtreeExpanded","indeterminate","has","set","createRef","renderedItem","create","defaultProps","selected","key","contentRef","treeSize","length","itemsRendered","element","unstable_wrapWithFocusZone","root","getAttributes","forElements","propTypes","createCommon","content","collectionShorthand","bool","collectionObjectShorthand","onActiveItemIdsChange","func","onSelectedItemIdsChange","Item","Title","Object","keys","Component","mappedArrayProp"],"mappings":"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","sourcesContent":["import { Accessibility, treeBehavior, TreeBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getNextElement,\n  useAutoControlled,\n  useTelemetry,\n  useUnhandledProps,\n  getElementType,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { Ref } from '@fluentui/react-component-ref';\nimport { TreeItem, TreeItemProps } from './TreeItem';\nimport { TreeTitle, TreeTitleProps } from './TreeTitle';\nimport {\n  childrenExist,\n  commonPropTypes,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  rtlTextContainer,\n} from '../../utils';\nimport {\n  ShorthandRenderFunction,\n  ShorthandCollection,\n  ComponentEventHandler,\n  ObjectShorthandCollection,\n  FluentComponentStaticProps,\n} from '../../types';\nimport {\n  getAllSelectableChildrenId,\n  isAllGroupChecked,\n  hasSubtree,\n  removeItemAtIndex,\n  getSiblings,\n  TreeContext,\n  TreeRenderContextValue,\n  processItemsForSelection,\n} from './utils';\n\nexport interface TreeProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<TreeBehaviorProps>;\n\n  /** Ids of expanded items. */\n  activeItemIds?: string[];\n\n  /** Ids of selected items. */\n  selectedItemIds?: string[];\n\n  /** Initial activeItemIds value. */\n  defaultActiveItemIds?: string[];\n\n  /** Initial selectedItemIds value. */\n  defaultSelectedItemIds?: string[];\n\n  /** Only allow one subtree to be expanded at a time. */\n  exclusive?: boolean;\n\n  /** Shorthand array of props for Tree. */\n  items?: ObjectShorthandCollection<TreeItemProps>;\n\n  /**\n   * A custom render function for the title slot.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderItemTitle?: ShorthandRenderFunction<TreeTitleProps>;\n\n  /**\n   * Called when active item ids change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `activeItemIds` reflecting the new state.\n   */\n  onActiveItemIdsChange?: ComponentEventHandler<TreeProps>;\n\n  /**\n   * Called when tree item selection state is changed.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `selectedItemIds` reflecting the new state.\n   */\n  onSelectedItemIdsChange?: ComponentEventHandler<TreeProps>;\n\n  /**\n   * Callback that provides rendered tree items to be used by react-virtualized for instance.\n   * Acts as a render prop, with the rendered tree items being the re-used logic.\n   *\n   * @param renderedItem - The array of rendered items.\n   * @returns The render prop result.\n   */\n  renderedItems?: (renderedItems: React.ReactElement[]) => React.ReactNode;\n\n  /** Whether or not tree items are selectable. */\n  selectable?: boolean;\n}\n\nexport interface TreeItemForRenderProps {\n  elementRef: React.RefObject<HTMLElement>;\n  id: string;\n  index: number;\n  level: number;\n  parent: string;\n  siblings: ShorthandCollection<TreeItemProps>;\n}\n\nexport const treeClassName = 'ui-tree';\n\nexport type TreeStylesProps = never;\n\nfunction useStableProps<P>(props: P) {\n  const stableProps = React.useRef<P>(props);\n\n  React.useEffect(() => {\n    stableProps.current = props;\n  });\n\n  return stableProps;\n}\n\nconst expandedItemsGenerator = (items: TreeProps['items'] | TreeItemProps['items'], acc = []) =>\n  _.reduce(\n    items,\n    (acc, item) => {\n      if (item['expanded'] && acc.indexOf(item['id']) === -1) {\n        acc.push(item['id']);\n      }\n\n      if (item['items']) {\n        return expandedItemsGenerator(item['items'], acc);\n      }\n\n      return acc;\n    },\n    acc,\n  );\n\nconst iterateItems = (items: TreeProps['items'] | TreeItemProps['items'], acc = []): string[] =>\n  _.reduce<TreeProps['items'] | TreeItemProps['items'], string[]>(\n    items,\n    (acc, item) => {\n      if (item['selected'] && acc.indexOf(item['id']) === -1) {\n        acc.push(item['id']);\n      }\n\n      if (item['items']) {\n        return iterateItems(item['items']);\n      }\n\n      return acc;\n    },\n    acc,\n  );\n\n/**\n * A Tree displays data organised in tree hierarchy.\n *\n * @accessibility\n * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.\n * @accessibilityIssues\n * [Treeview - JAWS doesn't narrate position for each tree item](https://github.com/FreedomScientific/VFO-standards-support/issues/338)\n * [Aria compliant trees are read as empty tables](https://bugs.chromium.org/p/chromium/issues/detail?id=1048770)\n */\nexport const Tree: ComponentWithAs<'div', TreeProps> &\n  FluentComponentStaticProps<TreeProps> & {\n    Item: typeof TreeItem;\n    Title: typeof TreeTitle;\n  } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Tree.displayName, context.telemetry);\n  setStart();\n\n  const {\n    exclusive,\n    items,\n    renderItemTitle,\n    selectable,\n    children,\n    renderedItems,\n    className,\n    design,\n    styles,\n    variables,\n  } = props;\n  const stableProps = useStableProps(props);\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Tree.handledProps, props);\n\n  const [activeItemIds, setActiveItemIdsState] = useAutoControlled<string[]>({\n    defaultValue: props.defaultActiveItemIds,\n    value: props.activeItemIds,\n    initialValue: expandedItemsGenerator(items),\n  });\n\n  const [selectedItemIds, setSelectedItemIdsState] = useAutoControlled<string[]>({\n    defaultValue: props.defaultSelectedItemIds,\n    value: props.selectedItemIds,\n    initialValue: iterateItems(items),\n  });\n\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: Tree.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<TreeStylesProps>(Tree.displayName, {\n    className: treeClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const treeRef = React.useRef<HTMLElement>();\n  const itemsRef = React.useRef(new Map<string, React.RefObject<HTMLElement>>());\n\n  const onFocusParent = React.useCallback(\n    (parent: string) => {\n      const parentRef = itemsRef.current.get(parent);\n\n      if (!parentRef || !parentRef.current) {\n        return;\n      }\n\n      parentRef.current.focus();\n    },\n    [itemsRef],\n  );\n\n  const setSelectedItemIds = React.useCallback(\n    (e: React.SyntheticEvent, updateSelectedItemIds: (currSelectedItemIds: string[]) => string[]) => {\n      _.invoke(stableProps.current, 'onSelectedItemIdsChange', e, {\n        ...stableProps.current,\n        selectedItemIds: updateSelectedItemIds,\n      });\n\n      setSelectedItemIdsState(updateSelectedItemIds);\n    },\n    [stableProps, setSelectedItemIdsState],\n  );\n\n  const setActiveItemIds = React.useCallback(\n    (e: React.SyntheticEvent, updateActiveItemIds: (activeItemIds: string[]) => string[]) => {\n      _.invoke(stableProps.current, 'onActiveItemIdsChange', e, {\n        ...stableProps.current,\n        activeItemIds: updateActiveItemIds,\n      });\n      setActiveItemIdsState(updateActiveItemIds);\n    },\n    [stableProps, setActiveItemIdsState],\n  );\n\n  const expandItems = React.useCallback(\n    (e: React.SyntheticEvent, treeItemProps: TreeItemProps) => {\n      const { id } = treeItemProps;\n\n      setActiveItemIds(e, currActiveItemIds => {\n        const siblings = getSiblings(stableProps.current.items, id);\n        const activeItemIdIndex = currActiveItemIds.indexOf(id);\n        let nextActiveItemsIds = currActiveItemIds;\n        if (activeItemIdIndex > -1) {\n          nextActiveItemsIds = removeItemAtIndex(currActiveItemIds, activeItemIdIndex);\n        } else {\n          if (exclusive) {\n            siblings.some(sibling => {\n              const activeSiblingIdIndex = currActiveItemIds.indexOf(sibling['id']);\n              if (activeSiblingIdIndex > -1) {\n                nextActiveItemsIds = removeItemAtIndex(currActiveItemIds, activeSiblingIdIndex);\n                return true;\n              }\n              return false;\n            });\n          }\n          nextActiveItemsIds = [...nextActiveItemsIds, id];\n        }\n        return nextActiveItemsIds;\n      });\n    },\n    [stableProps, setActiveItemIds, exclusive],\n  );\n\n  const onTitleClick = React.useCallback(\n    (e: React.SyntheticEvent, treeItemProps: TreeItemProps, executeSelection: boolean = false) => {\n      const treeItemHasSubtree = hasSubtree(treeItemProps);\n\n      if (!treeItemProps) {\n        return;\n      }\n\n      if (treeItemHasSubtree && !executeSelection && e.target === e.currentTarget) {\n        expandItems(e, treeItemProps);\n      }\n\n      if (treeItemProps.selectable) {\n        // parent must be selectable and expanded in order to procced with selection, otherwise return\n        if (treeItemHasSubtree && !(treeItemProps.selectableParent && treeItemProps.expanded)) {\n          return;\n        }\n\n        // if the target is equal to currentTarget it means treeItem should be collapsed, not procced with selection\n        if (treeItemHasSubtree && e.target === e.currentTarget && !executeSelection) {\n          return;\n        }\n\n        setSelectedItemIds(e, currSelectedItemIds => processItemsForSelection(treeItemProps, currSelectedItemIds));\n      }\n    },\n    [expandItems, setSelectedItemIds],\n  );\n\n  const onFocusFirstChild = React.useCallback(\n    (itemId: string) => {\n      const currentElement = itemsRef.current.get(itemId);\n\n      if (!currentElement || !currentElement.current) {\n        return;\n      }\n\n      const elementToBeFocused = getNextElement(treeRef.current, currentElement.current);\n\n      if (!elementToBeFocused) {\n        return;\n      }\n\n      elementToBeFocused.focus();\n    },\n    [treeRef, itemsRef],\n  );\n\n  const isActiveItem = React.useCallback(\n    (id: string): boolean => {\n      return activeItemIds.indexOf(id) > -1;\n    },\n    [activeItemIds],\n  );\n\n  const onSiblingsExpand = React.useCallback(\n    (e: React.SyntheticEvent, treeItemProps: TreeItemProps) => {\n      if (exclusive) {\n        return;\n      }\n\n      const { id } = treeItemProps;\n      const siblings = getSiblings(stableProps.current.items, id);\n\n      setActiveItemIds(e, currActiveItemIds => {\n        const nextActiveItemsIds = [...currActiveItemIds];\n\n        siblings.forEach(sibling => {\n          if (hasSubtree(sibling) && !isActiveItem(sibling['id'])) {\n            nextActiveItemsIds.push(sibling['id']);\n          }\n        });\n\n        if (hasSubtree(treeItemProps) && !isActiveItem(id)) {\n          nextActiveItemsIds.push(id);\n        }\n        return nextActiveItemsIds;\n      });\n    },\n    [exclusive, stableProps, isActiveItem, setActiveItemIds],\n  );\n\n  const isIndeterminate = (item: TreeItemProps) => {\n    if (!item.selectableParent || !item.items) {\n      return false;\n    }\n\n    const selectableItemIds = getAllSelectableChildrenId(item.items as TreeItemProps[]);\n\n    return (\n      !isAllGroupChecked(item.items as TreeItemProps[], selectedItemIds) &&\n      selectableItemIds.some(id => selectedItemIds.indexOf(id) > -1)\n    );\n  };\n\n  const isSelectedItem = (item: TreeItemProps): boolean => {\n    if (item.selectableParent && item.items) {\n      return isAllGroupChecked(item.items as TreeItemProps[], selectedItemIds);\n    }\n\n    return selectedItemIds && selectedItemIds.indexOf(item.id) > -1;\n  };\n\n  const contextValue: TreeRenderContextValue = React.useMemo(\n    () => ({\n      onFocusParent,\n      onSiblingsExpand,\n      onFocusFirstChild,\n      onTitleClick,\n    }),\n    [onFocusParent, onSiblingsExpand, onFocusFirstChild, onTitleClick],\n  );\n\n  const renderContent = (): React.ReactElement[] => {\n    if (!items) return null;\n\n    const renderItems = (items: TreeItemProps[], level = 1, parent?: string): React.ReactElement[] => {\n      return items.reduce((renderedItems: React.ReactElement[], item: TreeItemProps, index: number) => {\n        const id = item.id;\n        const isSubtree = hasSubtree(item);\n        const isSubtreeExpanded = isSubtree && isActiveItem(id);\n\n        const indeterminate = isIndeterminate(item);\n\n        if (!itemsRef.current.has(id)) {\n          itemsRef.current.set(id, React.createRef<HTMLElement>());\n        }\n\n        const renderedItem = TreeItem.create(item, {\n          defaultProps: () =>\n            getA11yProps('item', {\n              expanded: isSubtreeExpanded,\n              selected: isSelectedItem(item),\n              selectable,\n              renderItemTitle,\n              id,\n              key: id,\n              parent,\n              level,\n              index: index + 1, // Used for aria-posinset and it's 1-based.\n              contentRef: itemsRef.current.get(id),\n              treeSize: items.length,\n              indeterminate,\n              onSiblingsExpand,\n            }),\n        });\n\n        return [\n          ...renderedItems,\n          renderedItem,\n          ...(isSubtreeExpanded ? renderItems(item.items as TreeItemProps[], level + 1, id) : ([] as any)),\n        ];\n      }, []);\n    };\n    const itemsRendered = renderItems(items as TreeItemProps[]);\n\n    return itemsRendered;\n  };\n\n  const element = (\n    <TreeContext.Provider value={contextValue}>\n      <Ref innerRef={treeRef}>\n        {getA11yProps.unstable_wrapWithFocusZone(\n          <ElementType\n            {...getA11yProps('root', {\n              className: classes.root,\n              ...rtlTextContainer.getAttributes({ forElements: [children] }),\n              ...unhandledProps,\n            })}\n          >\n            {childrenExist(children) ? children : renderedItems ? renderedItems(renderContent()) : renderContent()}\n          </ElementType>,\n        )}\n      </Ref>\n    </TreeContext.Provider>\n  );\n  setEnd();\n  return element;\n};\n\nTree.displayName = 'Tree';\n\nTree.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  activeItemIds: customPropTypes.collectionShorthand,\n  selectedItemIds: customPropTypes.collectionShorthand,\n  defaultActiveItemIds: customPropTypes.collectionShorthand,\n  defaultSelectedItemIds: customPropTypes.collectionShorthand,\n  exclusive: PropTypes.bool,\n  selectable: PropTypes.bool,\n  items: customPropTypes.collectionObjectShorthand,\n  onActiveItemIdsChange: PropTypes.func,\n  onSelectedItemIdsChange: PropTypes.func,\n  renderItemTitle: PropTypes.func,\n  renderedItems: PropTypes.func,\n};\n\nTree.Item = TreeItem;\nTree.Title = TreeTitle;\n\nTree.defaultProps = {\n  accessibility: treeBehavior,\n};\n\nTree.handledProps = Object.keys(Tree.propTypes) as any;\n\nTree.create = createShorthandFactory({\n  Component: Tree,\n  mappedArrayProp: 'items',\n});\n"],"file":"Tree.js"}