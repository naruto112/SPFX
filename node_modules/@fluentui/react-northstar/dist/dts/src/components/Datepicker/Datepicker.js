"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var date_time_utilities_1 = require("@fluentui/date-time-utilities");
var react_bindings_1 = require("@fluentui/react-bindings");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var react_icons_northstar_1 = require("@fluentui/react-icons-northstar");
var customPropTypes = require("@fluentui/react-proptypes");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var Button_1 = require("../Button/Button");
var Input_1 = require("../Input/Input");
var Popup_1 = require("../Popup/Popup");
var DatepickerCalendar_1 = require("./DatepickerCalendar");
var DatepickerCalendarCell_1 = require("./DatepickerCalendarCell");
var DatepickerCalendarHeader_1 = require("./DatepickerCalendarHeader");
var DatepickerCalendarHeaderAction_1 = require("./DatepickerCalendarHeaderAction");
var DatepickerCalendarHeaderCell_1 = require("./DatepickerCalendarHeaderCell");
// TODO: extract to date-time-utilities
exports.DEFAULT_LOCALIZED_STRINGS = {
    months: [
        'January',
        'February',
        'March',
        'April',
        'May',
        'June',
        'July',
        'August',
        'September',
        'October',
        'November',
        'December',
    ],
    shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    shortDays: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
};
exports.datepickerClassName = 'ui-datepicker';
/**
 * A Datepicker is used to display dates.
 * This component is currently UNSTABLE!
 */
exports.Datepicker = function (props) {
    var _a, _b;
    var context = react_bindings_1.useFluentContext();
    var _c = react_bindings_1.useTelemetry(exports.Datepicker.displayName, context.telemetry), setStart = _c.setStart, setEnd = _c.setEnd;
    setStart();
    var datepickerRef = React.useRef();
    var _d = React.useState(false), open = _d[0], setOpen = _d[1];
    var _e = React.useState(), selectedDate = _e[0], setSelectedDate = _e[1];
    var valueFormatter = function (date) { return (date ? date_time_utilities_1.formatMonthDayYear(date, exports.DEFAULT_LOCALIZED_STRINGS) : ''); };
    var firstDayOfWeek = props.firstDayOfWeek, firstWeekOfYear = props.firstWeekOfYear, dateRangeType = props.dateRangeType, calendar = props.calendar, popup = props.popup, className = props.className, design = props.design, styles = props.styles, variables = props.variables;
    var calendarOptions = {
        selectedDate: (_a = (selectedDate !== null && selectedDate !== void 0 ? selectedDate : props.today), (_a !== null && _a !== void 0 ? _a : new Date())),
        navigatedDate: (_b = (selectedDate !== null && selectedDate !== void 0 ? selectedDate : props.today), (_b !== null && _b !== void 0 ? _b : new Date())),
        firstDayOfWeek: firstDayOfWeek,
        firstWeekOfYear: firstWeekOfYear,
        dateRangeType: dateRangeType,
    };
    var showCalendarGrid = function () {
        setOpen(true);
    };
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.Datepicker.handledProps, props);
    var getA11yProps = react_bindings_1.useAccessibility(props.accessibility, {
        debugName: exports.Datepicker.displayName,
        actionHandlers: {},
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(exports.Datepicker.displayName, {
        className: exports.datepickerClassName,
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }).classes;
    var overrideDatepickerCalendarProps = function (predefinedProps) { return (tslib_1.__assign(tslib_1.__assign({}, calendarOptions), { onDateChange: function (e, itemProps) {
            setSelectedDate(itemProps.value.originalDate);
            setOpen(false);
            _.invoke(predefinedProps, 'onDateChange', e, itemProps);
        } })); };
    var calendarElement = utils_1.createShorthand(DatepickerCalendar_1.DatepickerCalendar, calendar, {
        defaultProps: function () { return getA11yProps('calendar', {}); },
        overrideProps: overrideDatepickerCalendarProps,
    });
    var element = (React.createElement(react_component_ref_1.Ref, { innerRef: datepickerRef }, getA11yProps.unstable_wrapWithFocusZone(React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign({ className: classes.root }, unhandledProps))),
        React.createElement(Input_1.Input, { readOnly: true, onClick: showCalendarGrid, value: valueFormatter(selectedDate) }),
        utils_1.createShorthand(Popup_1.Popup, popup, {
            defaultProps: function () { return ({
                open: open,
                content: calendarElement,
                trapFocus: true,
                trigger: React.createElement(Button_1.Button, { icon: React.createElement(react_icons_northstar_1.CalendarIcon, null), title: "Open calendar", iconOnly: true }),
            }); },
            overrideProps: function (predefinedProps) { return ({
                onOpenChange: function (e, _a) {
                    var open = _a.open;
                    setOpen(open);
                    _.invoke(predefinedProps, 'onOpenChange', e, { open: open });
                },
            }); },
        })))));
    setEnd();
    return element;
};
exports.Datepicker.displayName = 'Datepicker';
exports.Datepicker.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon()), { calendar: customPropTypes.itemShorthand, popup: customPropTypes.itemShorthand, minDate: PropTypes.instanceOf(Date), maxDate: PropTypes.instanceOf(Date), restrictedDates: PropTypes.arrayOf(PropTypes.instanceOf(Date)), firstDayOfWeek: PropTypes.oneOf(Object.keys(date_time_utilities_1.DayOfWeek).map(function (name) { return date_time_utilities_1.DayOfWeek[name]; })), firstWeekOfYear: PropTypes.oneOf(Object.keys(date_time_utilities_1.FirstWeekOfYear).map(function (name) { return date_time_utilities_1.FirstWeekOfYear[name]; })), dateRangeType: PropTypes.oneOf(Object.keys(date_time_utilities_1.DateRangeType).map(function (name) { return date_time_utilities_1.DateRangeType[name]; })), daysToSelectInDayView: PropTypes.number, today: PropTypes.instanceOf(Date), showWeekNumbers: PropTypes.bool, workWeekDays: PropTypes.arrayOf(PropTypes.oneOf(Object.keys(date_time_utilities_1.DayOfWeek).map(function (name) { return date_time_utilities_1.DayOfWeek[name]; }))), localizedStrings: PropTypes.object, format: PropTypes.func, parse: PropTypes.func, disabled: PropTypes.bool, isRequired: PropTypes.bool, onDateChange: PropTypes.func, goToToday: PropTypes.string, placeholder: PropTypes.string });
exports.Datepicker.defaultProps = {
    accessibility: accessibility_1.datepickerBehavior,
    calendar: {},
    popup: {},
    firstDayOfWeek: date_time_utilities_1.DayOfWeek.Monday,
    firstWeekOfYear: date_time_utilities_1.FirstWeekOfYear.FirstDay,
    dateRangeType: date_time_utilities_1.DateRangeType.Day,
};
exports.Datepicker.handledProps = Object.keys(exports.Datepicker.propTypes);
exports.Datepicker.create = utils_1.createShorthandFactory({ Component: exports.Datepicker });
exports.Datepicker.Calendar = DatepickerCalendar_1.DatepickerCalendar;
exports.Datepicker.CalendarHeader = DatepickerCalendarHeader_1.DatepickerCalendarHeader;
exports.Datepicker.CalendarHeaderAction = DatepickerCalendarHeaderAction_1.DatepickerCalendarHeaderAction;
exports.Datepicker.CalendarHeaderCell = DatepickerCalendarHeaderCell_1.DatepickerCalendarHeaderCell;
exports.Datepicker.CalendarCell = DatepickerCalendarCell_1.DatepickerCalendarCell;
