"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var date_time_utilities_1 = require("@fluentui/date-time-utilities");
var react_bindings_1 = require("@fluentui/react-bindings");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var customPropTypes = require("@fluentui/react-proptypes");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var Grid_1 = require("../Grid/Grid");
var DatepickerCalendarHeader_1 = require("./DatepickerCalendarHeader");
var DatepickerCalendarCell_1 = require("./DatepickerCalendarCell");
var DatepickerCalendarHeaderCell_1 = require("./DatepickerCalendarHeaderCell");
// TODO: extract to date-time-utilities
exports.DEFAULT_CALENDAR_LOCALIZED_STRINGS = {
    months: [
        'January',
        'February',
        'March',
        'April',
        'May',
        'June',
        'July',
        'August',
        'September',
        'October',
        'November',
        'December',
    ],
    shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    shortDays: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
};
exports.datepickerCalendarClassName = 'ui-datepicker__calendar';
/**
 * A DatepickerCalendar is used to display dates in sematically grouped way.
 */
exports.DatepickerCalendar = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.DatepickerCalendar.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var datepickerCalendarRef = React.useRef();
    var className = props.className, design = props.design, styles = props.styles, variables = props.variables, calendarHeaderCell = props.calendarHeaderCell, calendarCell = props.calendarCell, header = props.header, selectedDate = props.selectedDate, navigatedDate = props.navigatedDate, firstDayOfWeek = props.firstDayOfWeek, firstWeekOfYear = props.firstWeekOfYear, dateRangeType = props.dateRangeType, weeksToShow = props.weeksToShow, localizedStrings = props.localizedStrings, today = props.today, onDateChange = props.onDateChange;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.DatepickerCalendar.handledProps, props);
    var getA11yProps = react_bindings_1.useAccessibility(props.accessibility, {
        debugName: exports.DatepickerCalendar.displayName,
        actionHandlers: {},
        rtl: context.rtl,
    });
    var normalizedSelectedDate = selectedDate || today || new Date();
    var _b = React.useState(navigatedDate || today || new Date()), gridNavigatedDate = _b[0], setGridNavigatedDate = _b[1];
    var classes = react_bindings_1.useStyles(exports.DatepickerCalendar.displayName, {
        className: exports.datepickerCalendarClassName,
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }).classes;
    /** Get days grid and slice it in case it contains additional weeks at the beginning and end. */
    var getSlicedGrid = function () {
        var gridOptions = {
            selectedDate: normalizedSelectedDate,
            navigatedDate: gridNavigatedDate,
            firstDayOfWeek: firstDayOfWeek,
            firstWeekOfYear: firstWeekOfYear,
            dateRangeType: dateRangeType,
        };
        var grid = date_time_utilities_1.getDayGrid(gridOptions);
        if (!weeksToShow) {
            // Slicing because grid contains extra 1 week in the front and in the back.
            return grid.slice(1, grid.length - 1);
        }
        return grid;
    };
    var grid = getSlicedGrid();
    var changeMonth = function (nextMonth) {
        var updatedGridNavigatedDate = date_time_utilities_1.addMonths(gridNavigatedDate, nextMonth ? 1 : -1);
        setGridNavigatedDate(updatedGridNavigatedDate);
    };
    var element = (React.createElement(react_component_ref_1.Ref, { innerRef: datepickerCalendarRef }, getA11yProps.unstable_wrapWithFocusZone(React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign({ className: classes.root }, unhandledProps))),
        utils_1.createShorthand(DatepickerCalendarHeader_1.DatepickerCalendarHeader, header, {
            defaultProps: function () { return ({
                label: date_time_utilities_1.formatMonthYear(gridNavigatedDate, localizedStrings),
            }); },
            overrideProps: function (predefinedProps) { return ({
                onPreviousClick: function (e, data) {
                    changeMonth(false);
                    _.invoke(predefinedProps, 'onPreviousClick', e, data);
                },
                onNextClick: function (e, data) {
                    changeMonth(true);
                    _.invoke(predefinedProps, 'onNextClick', e, data);
                },
            }); },
        }),
        React.createElement(Grid_1.Grid, { rows: grid.length + 1, columns: date_time_utilities_1.DAYS_IN_WEEK },
            _.times(date_time_utilities_1.DAYS_IN_WEEK, function (dayNumber) {
                return utils_1.createShorthand(DatepickerCalendarHeaderCell_1.DatepickerCalendarHeaderCell, calendarHeaderCell, {
                    defaultProps: function () {
                        return getA11yProps('calendarHeaderCell', {
                            content: localizedStrings.shortDays[(dayNumber + firstDayOfWeek) % date_time_utilities_1.DAYS_IN_WEEK],
                            key: dayNumber,
                        });
                    },
                });
            }),
            _.map(grid, function (week) {
                return _.map(week, function (day) {
                    return utils_1.createShorthand(DatepickerCalendarCell_1.DatepickerCalendarCell, calendarCell, {
                        defaultProps: function () {
                            return getA11yProps('calendarCell', {
                                content: day.date,
                                key: day.key,
                                'aria-label': date_time_utilities_1.formatMonthDayYear(day.originalDate, localizedStrings),
                                primary: day.isSelected,
                                disabled: !day.isInMonth,
                            });
                        },
                        overrideProps: function (predefinedProps) { return ({
                            onClick: function (e) {
                                onDateChange(e, tslib_1.__assign(tslib_1.__assign({}, predefinedProps), { value: day }));
                                _.invoke(predefinedProps, 'onClick', e, tslib_1.__assign(tslib_1.__assign({}, predefinedProps), { value: day }));
                            },
                        }); },
                    });
                });
            }))))));
    setEnd();
    return element;
};
exports.DatepickerCalendar.displayName = 'DatepickerCalendar';
exports.DatepickerCalendar.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon()), { calendarCell: customPropTypes.itemShorthand, calendarHeaderCell: customPropTypes.itemShorthand, header: customPropTypes.itemShorthand, onDateChange: PropTypes.func, localizedStrings: PropTypes.object, selectedDate: PropTypes.instanceOf(Date), navigatedDate: PropTypes.instanceOf(Date), minDate: PropTypes.instanceOf(Date), maxDate: PropTypes.instanceOf(Date), restrictedDates: PropTypes.arrayOf(PropTypes.instanceOf(Date)), firstDayOfWeek: PropTypes.oneOf(Object.keys(date_time_utilities_1.DayOfWeek).map(function (name) { return date_time_utilities_1.DayOfWeek[name]; })), firstWeekOfYear: PropTypes.oneOf(Object.keys(date_time_utilities_1.FirstWeekOfYear).map(function (name) { return date_time_utilities_1.FirstWeekOfYear[name]; })), dateRangeType: PropTypes.oneOf(Object.keys(date_time_utilities_1.DateRangeType).map(function (name) { return date_time_utilities_1.DateRangeType[name]; })), daysToSelectInDayView: PropTypes.number, today: PropTypes.instanceOf(Date), showWeekNumbers: PropTypes.bool, workWeekDays: PropTypes.arrayOf(PropTypes.oneOf(Object.keys(date_time_utilities_1.DayOfWeek).map(function (name) { return date_time_utilities_1.DayOfWeek[name]; }))), format: PropTypes.func, parse: PropTypes.func });
exports.DatepickerCalendar.defaultProps = {
    accessibility: accessibility_1.datepickerCalendarBehavior,
    firstDayOfWeek: date_time_utilities_1.DayOfWeek.Monday,
    firstWeekOfYear: date_time_utilities_1.FirstWeekOfYear.FirstDay,
    dateRangeType: date_time_utilities_1.DateRangeType.Day,
    header: {},
    calendarCell: {},
    calendarHeaderCell: {},
    localizedStrings: exports.DEFAULT_CALENDAR_LOCALIZED_STRINGS,
};
exports.DatepickerCalendar.handledProps = Object.keys(exports.DatepickerCalendar.propTypes);
