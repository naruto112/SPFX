{"version":3,"sources":["components/Table/TableCell.tsx"],"names":["tableCellClassName","tableCellSlotClassNames","content","TableCell","props","context","displayName","telemetry","setStart","setEnd","cellRef","React","useRef","children","truncateContent","className","design","styles","variables","hasChildren","ElementType","unhandledProps","handledProps","getA11yProps","accessibility","debugName","actionHandlers","focusCell","e","preventDefault","current","focus","performClick","handleClick","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","currentTarget","target","element","unstable_wrapWithFocusZone","root","onClick","Box","create","defaultProps","propTypes","commonPropTypes","createCommon","customPropTypes","every","disallow","PropTypes","oneOfType","arrayOf","nodeContent","bool","Object","keys","tableCellBehavior","Component","mappedProp"],"mappings":"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","sourcesContent":["import * as customPropTypes from '@fluentui/react-proptypes';\nimport { Accessibility, tableCellBehavior, TableCellBehaviorProps } from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport {\n  childrenExist,\n  ChildrenComponentProps,\n  commonPropTypes,\n  ContentComponentProps,\n  createShorthandFactory,\n  UIComponentProps,\n} from '../../utils';\nimport {\n  ComponentWithAs,\n  useTelemetry,\n  useStyles,\n  useFluentContext,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n} from '@fluentui/react-bindings';\n\nimport { Box, BoxProps } from '../Box/Box';\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\n\nexport interface TableCellProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>> {\n  /**\n   * Accessibility behavior if overridden by the user.\n   * @available TableCellBehavior\n   * */\n  accessibility?: Accessibility<TableCellBehaviorProps>;\n\n  /**\n   * Truncate cell's content\n   */\n  truncateContent?: boolean;\n}\n\nexport type TableCellStylesProps = Pick<TableCellProps, 'truncateContent'>;\n\nexport interface TableCellSlotClassNames {\n  content: string;\n}\n\nexport const tableCellClassName = 'ui-table__cell';\nexport const tableCellSlotClassNames: TableCellSlotClassNames = {\n  content: `${tableCellClassName}__content`,\n};\n\n/**\n * Component represents a table cell.\n */\nexport const TableCell: ComponentWithAs<'div', TableCellProps> & FluentComponentStaticProps<TableCellProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(TableCell.displayName, context.telemetry);\n  setStart();\n  const cellRef = React.useRef<HTMLElement>();\n\n  const { children, content, truncateContent, className, design, styles, variables } = props;\n  const hasChildren = childrenExist(children);\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(TableCell.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: TableCell.displayName,\n    actionHandlers: {\n      focusCell: e => {\n        e.preventDefault();\n        cellRef.current.focus();\n      },\n      performClick: e => {\n        handleClick(e);\n      },\n    },\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<TableCellStylesProps>(TableCell.displayName, {\n    className: tableCellClassName,\n    mapPropsToStyles: () => ({\n      truncateContent,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    if (e.currentTarget === e.target) {\n      _.invoke(props, 'onClick', e, props);\n      e.preventDefault();\n    }\n  };\n\n  const element = (\n    <Ref innerRef={cellRef}>\n      {getA11yProps.unstable_wrapWithFocusZone(\n        <ElementType\n          {...getA11yProps('root', {\n            className: classes.root,\n            onClick: handleClick,\n            ...unhandledProps,\n          })}\n        >\n          {hasChildren\n            ? children\n            : Box.create(content, {\n                defaultProps: () => ({ className: tableCellSlotClassNames.content, styles: resolvedStyles.content }),\n              })}\n        </ElementType>,\n      )}\n    </Ref>\n  );\n  setEnd();\n  return element;\n};\n\nTableCell.displayName = 'TableCell';\n\nTableCell.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  content: customPropTypes.every([\n    customPropTypes.disallow(['children']),\n    PropTypes.oneOfType([PropTypes.arrayOf(customPropTypes.nodeContent), customPropTypes.nodeContent]),\n  ]),\n  truncateContent: PropTypes.bool,\n};\n\nTableCell.handledProps = Object.keys(TableCell.propTypes) as any;\n\nTableCell.defaultProps = {\n  accessibility: tableCellBehavior,\n};\n\nTableCell.create = createShorthandFactory({ Component: TableCell, mappedProp: 'content' });\n"],"file":"TableCell.js"}