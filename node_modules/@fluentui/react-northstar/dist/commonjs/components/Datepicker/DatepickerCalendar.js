"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.DatepickerCalendar = exports.datepickerCalendarClassName = exports.DEFAULT_CALENDAR_LOCALIZED_STRINGS = void 0;

var _map2 = _interopRequireDefault(require("lodash/map"));

var _times2 = _interopRequireDefault(require("lodash/times"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@fluentui/accessibility");

var _dateTimeUtilities = require("@fluentui/date-time-utilities");

var _reactBindings = require("@fluentui/react-bindings");

var _reactComponentRef = require("@fluentui/react-component-ref");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _Grid = require("../Grid/Grid");

var _DatepickerCalendarHeader = require("./DatepickerCalendarHeader");

var _DatepickerCalendarCell = require("./DatepickerCalendarCell");

var _DatepickerCalendarHeaderCell = require("./DatepickerCalendarHeaderCell");

// TODO: extract to date-time-utilities
var DEFAULT_CALENDAR_LOCALIZED_STRINGS = {
  months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
  shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
  days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
  shortDays: ['S', 'M', 'T', 'W', 'T', 'F', 'S']
}; // TODO: extract to date-time-utilities

exports.DEFAULT_CALENDAR_LOCALIZED_STRINGS = DEFAULT_CALENDAR_LOCALIZED_STRINGS;
var datepickerCalendarClassName = 'ui-datepicker__calendar';
/**
 * A DatepickerCalendar is used to display dates in sematically grouped way.
 */

exports.datepickerCalendarClassName = datepickerCalendarClassName;

var DatepickerCalendar = function DatepickerCalendar(props) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(DatepickerCalendar.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var datepickerCalendarRef = React.useRef();
  var className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables,
      calendarHeaderCell = props.calendarHeaderCell,
      calendarCell = props.calendarCell,
      header = props.header,
      selectedDate = props.selectedDate,
      navigatedDate = props.navigatedDate,
      firstDayOfWeek = props.firstDayOfWeek,
      firstWeekOfYear = props.firstWeekOfYear,
      dateRangeType = props.dateRangeType,
      weeksToShow = props.weeksToShow,
      localizedStrings = props.localizedStrings,
      today = props.today,
      onDateChange = props.onDateChange;
  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(DatepickerCalendar.handledProps, props);
  var getA11yProps = (0, _reactBindings.useAccessibility)(props.accessibility, {
    debugName: DatepickerCalendar.displayName,
    actionHandlers: {},
    rtl: context.rtl
  });
  var normalizedSelectedDate = selectedDate || today || new Date();

  var _React$useState = React.useState(navigatedDate || today || new Date()),
      gridNavigatedDate = _React$useState[0],
      setGridNavigatedDate = _React$useState[1];

  var _useStyles = (0, _reactBindings.useStyles)(DatepickerCalendar.displayName, {
    className: datepickerCalendarClassName,
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;
  /** Get days grid and slice it in case it contains additional weeks at the beginning and end. */


  var getSlicedGrid = function getSlicedGrid() {
    var gridOptions = {
      selectedDate: normalizedSelectedDate,
      navigatedDate: gridNavigatedDate,
      firstDayOfWeek: firstDayOfWeek,
      firstWeekOfYear: firstWeekOfYear,
      dateRangeType: dateRangeType
    };
    var grid = (0, _dateTimeUtilities.getDayGrid)(gridOptions);

    if (!weeksToShow) {
      // Slicing because grid contains extra 1 week in the front and in the back.
      return grid.slice(1, grid.length - 1);
    }

    return grid;
  };

  var grid = getSlicedGrid();

  var changeMonth = function changeMonth(nextMonth) {
    var updatedGridNavigatedDate = (0, _dateTimeUtilities.addMonths)(gridNavigatedDate, nextMonth ? 1 : -1);
    setGridNavigatedDate(updatedGridNavigatedDate);
  };

  var element = /*#__PURE__*/React.createElement(_reactComponentRef.Ref, {
    innerRef: datepickerCalendarRef
  }, getA11yProps.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
    className: classes.root
  }, unhandledProps)), (0, _utils.createShorthand)(_DatepickerCalendarHeader.DatepickerCalendarHeader, header, {
    defaultProps: function defaultProps() {
      return {
        label: (0, _dateTimeUtilities.formatMonthYear)(gridNavigatedDate, localizedStrings)
      };
    },
    overrideProps: function overrideProps(predefinedProps) {
      return {
        onPreviousClick: function onPreviousClick(e, data) {
          changeMonth(false);
          (0, _invoke2.default)(predefinedProps, 'onPreviousClick', e, data);
        },
        onNextClick: function onNextClick(e, data) {
          changeMonth(true);
          (0, _invoke2.default)(predefinedProps, 'onNextClick', e, data);
        }
      };
    }
  }), /*#__PURE__*/React.createElement(_Grid.Grid, {
    rows: grid.length + 1,
    columns: _dateTimeUtilities.DAYS_IN_WEEK
  }, (0, _times2.default)(_dateTimeUtilities.DAYS_IN_WEEK, function (dayNumber) {
    return (0, _utils.createShorthand)(_DatepickerCalendarHeaderCell.DatepickerCalendarHeaderCell, calendarHeaderCell, {
      defaultProps: function defaultProps() {
        return getA11yProps('calendarHeaderCell', {
          content: localizedStrings.shortDays[(dayNumber + firstDayOfWeek) % _dateTimeUtilities.DAYS_IN_WEEK],
          key: dayNumber
        });
      }
    });
  }), (0, _map2.default)(grid, function (week) {
    return (0, _map2.default)(week, function (day) {
      return (0, _utils.createShorthand)(_DatepickerCalendarCell.DatepickerCalendarCell, calendarCell, {
        defaultProps: function defaultProps() {
          return getA11yProps('calendarCell', {
            content: day.date,
            key: day.key,
            'aria-label': (0, _dateTimeUtilities.formatMonthDayYear)(day.originalDate, localizedStrings),
            primary: day.isSelected,
            disabled: !day.isInMonth
          });
        },
        overrideProps: function overrideProps(predefinedProps) {
          return {
            onClick: function onClick(e) {
              onDateChange(e, Object.assign({}, predefinedProps, {
                value: day
              }));
              (0, _invoke2.default)(predefinedProps, 'onClick', e, Object.assign({}, predefinedProps, {
                value: day
              }));
            }
          };
        }
      });
    });
  })))));
  setEnd();
  return element;
};

exports.DatepickerCalendar = DatepickerCalendar;
DatepickerCalendar.displayName = 'DatepickerCalendar';
DatepickerCalendar.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon(), {
  calendarCell: customPropTypes.itemShorthand,
  calendarHeaderCell: customPropTypes.itemShorthand,
  header: customPropTypes.itemShorthand,
  onDateChange: PropTypes.func,
  localizedStrings: PropTypes.object,
  selectedDate: PropTypes.instanceOf(Date),
  navigatedDate: PropTypes.instanceOf(Date),
  minDate: PropTypes.instanceOf(Date),
  maxDate: PropTypes.instanceOf(Date),
  restrictedDates: PropTypes.arrayOf(PropTypes.instanceOf(Date)),
  firstDayOfWeek: PropTypes.oneOf(Object.keys(_dateTimeUtilities.DayOfWeek).map(function (name) {
    return _dateTimeUtilities.DayOfWeek[name];
  })),
  firstWeekOfYear: PropTypes.oneOf(Object.keys(_dateTimeUtilities.FirstWeekOfYear).map(function (name) {
    return _dateTimeUtilities.FirstWeekOfYear[name];
  })),
  dateRangeType: PropTypes.oneOf(Object.keys(_dateTimeUtilities.DateRangeType).map(function (name) {
    return _dateTimeUtilities.DateRangeType[name];
  })),
  daysToSelectInDayView: PropTypes.number,
  today: PropTypes.instanceOf(Date),
  showWeekNumbers: PropTypes.bool,
  workWeekDays: PropTypes.arrayOf(PropTypes.oneOf(Object.keys(_dateTimeUtilities.DayOfWeek).map(function (name) {
    return _dateTimeUtilities.DayOfWeek[name];
  }))),
  format: PropTypes.func,
  parse: PropTypes.func
});
DatepickerCalendar.defaultProps = {
  accessibility: _accessibility.datepickerCalendarBehavior,
  firstDayOfWeek: _dateTimeUtilities.DayOfWeek.Monday,
  firstWeekOfYear: _dateTimeUtilities.FirstWeekOfYear.FirstDay,
  dateRangeType: _dateTimeUtilities.DateRangeType.Day,
  header: {},
  calendarCell: {},
  calendarHeaderCell: {},
  localizedStrings: DEFAULT_CALENDAR_LOCALIZED_STRINGS
};
DatepickerCalendar.handledProps = Object.keys(DatepickerCalendar.propTypes);
//# sourceMappingURL=DatepickerCalendar.js.map
