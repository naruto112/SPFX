{"version":3,"sources":["components/Datepicker/Datepicker.tsx"],"names":["DEFAULT_LOCALIZED_STRINGS","months","shortMonths","days","shortDays","datepickerClassName","Datepicker","props","context","displayName","telemetry","setStart","setEnd","datepickerRef","React","useRef","useState","open","setOpen","selectedDate","setSelectedDate","valueFormatter","date","firstDayOfWeek","firstWeekOfYear","dateRangeType","calendar","popup","className","design","styles","variables","calendarOptions","today","Date","navigatedDate","showCalendarGrid","ElementType","unhandledProps","handledProps","getA11yProps","accessibility","debugName","actionHandlers","rtl","mapPropsToInlineStyles","classes","overrideDatepickerCalendarProps","predefinedProps","onDateChange","e","itemProps","value","originalDate","calendarElement","DatepickerCalendar","defaultProps","overrideProps","element","unstable_wrapWithFocusZone","root","Popup","content","trapFocus","trigger","onOpenChange","propTypes","commonPropTypes","createCommon","customPropTypes","itemShorthand","minDate","PropTypes","instanceOf","maxDate","restrictedDates","arrayOf","oneOf","Object","keys","DayOfWeek","map","name","FirstWeekOfYear","DateRangeType","daysToSelectInDayView","number","showWeekNumbers","bool","workWeekDays","localizedStrings","object","format","func","parse","disabled","isRequired","goToToday","string","placeholder","datepickerBehavior","Monday","FirstDay","Day","create","Component","Calendar","CalendarHeader","DatepickerCalendarHeader","CalendarHeaderAction","DatepickerCalendarHeaderAction","CalendarHeaderCell","DatepickerCalendarHeaderCell","CalendarCell","DatepickerCalendarCell"],"mappings":"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","sourcesContent":["import { Accessibility, datepickerBehavior, DatepickerBehaviorProps } from '@fluentui/accessibility';\nimport {\n  DateRangeType,\n  DayOfWeek,\n  FirstWeekOfYear,\n  formatMonthDayYear,\n  IDateGridStrings,\n  IDay,\n  IDayGridOptions,\n  IRestrictedDatesOptions,\n} from '@fluentui/date-time-utilities';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport { CalendarIcon } from '@fluentui/react-icons-northstar';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { ComponentEventHandler, FluentComponentStaticProps, ShorthandValue } from '../../types';\nimport { commonPropTypes, createShorthand, createShorthandFactory, UIComponentProps } from '../../utils';\nimport { Button } from '../Button/Button';\nimport { Input } from '../Input/Input';\nimport { Popup, PopupProps } from '../Popup/Popup';\nimport { DatepickerCalendar, DatepickerCalendarProps } from './DatepickerCalendar';\nimport { DatepickerCalendarCell } from './DatepickerCalendarCell';\nimport { DatepickerCalendarHeader } from './DatepickerCalendarHeader';\nimport { DatepickerCalendarHeaderAction } from './DatepickerCalendarHeaderAction';\nimport { DatepickerCalendarHeaderCell } from './DatepickerCalendarHeaderCell';\n\n// TODO: extract to date-time-utilities\nexport const DEFAULT_LOCALIZED_STRINGS: IDateGridStrings = {\n  months: [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ],\n  shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  shortDays: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n};\n\n// TODO: extract to date-time-utilities\nexport interface IDateFormatting {\n  /**\n   * Format the date according to specified function.\n   * Intended use case is localization.\n   */\n  format?: (date: Date) => string;\n\n  /**\n   * Parse date from string representation into Date type.\n   */\n  parse?: (date: string) => Date;\n}\n\n// TODO: extract to date-time-utilities\nexport interface IDatepickerOptions extends IRestrictedDatesOptions {\n  /**\n   * The first day of the week for your locale.\n   */\n  firstDayOfWeek?: DayOfWeek;\n\n  /**\n   * Defines when the first week of the year should start, FirstWeekOfYear.FirstDay,\n   * FirstWeekOfYear.FirstFullWeek or FirstWeekOfYear.FirstFourDayWeek are the possible values\n   */\n  firstWeekOfYear?: FirstWeekOfYear;\n\n  /**\n   * The date range type indicating how  many days should be selected as the user\n   * selects days\n   */\n  dateRangeType?: DateRangeType;\n\n  /**\n   * The number of days to select while dateRangeType === DateRangeType.Day. Used in order to have multi-day\n   * views.\n   */\n  daysToSelectInDayView?: number;\n\n  /**\n   * Value of today. If null, current time in client machine will be used.\n   */\n  today?: Date;\n\n  /**\n   * Whether the calendar should show the week number (weeks 1 to 53) before each week row\n   */\n  showWeekNumbers?: boolean;\n\n  /**\n   * The days that are selectable when `dateRangeType` is WorkWeek.\n   * If `dateRangeType` is not WorkWeek this property does nothing.\n   */\n  workWeekDays?: DayOfWeek[];\n}\n\nexport interface DatepickerProps extends IDatepickerOptions, IDateFormatting, UIComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<DatepickerBehaviorProps>;\n\n  /** Shorthand for the datepicker calendar. */\n  calendar?: ShorthandValue<DatepickerCalendarProps>;\n\n  /** Shorthand for the datepicker popup. */\n  popup?: ShorthandValue<PopupProps>;\n\n  /** Datepicker shows it is currently unable to be interacted with. */\n  disabled?: boolean;\n\n  /** Datepicker shows it is currently unable to be interacted with. */\n  isRequired?: boolean;\n\n  /**\n   * Called on change of the date.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onDateChange?: ComponentEventHandler<DatepickerProps & { value: IDay }>;\n\n  /** String to render for button to direct the user to today's date. */\n  goToToday?: string;\n\n  /** Text placeholder for the input field. */\n  placeholder?: string;\n\n  /** Localized labels */\n  localizedStrings?: IDateGridStrings;\n}\n\nexport type DatepickerStylesProps = never;\n\nexport const datepickerClassName = 'ui-datepicker';\n\n/**\n * A Datepicker is used to display dates.\n * This component is currently UNSTABLE!\n */\nexport const Datepicker: ComponentWithAs<'div', DatepickerProps> &\n  FluentComponentStaticProps<DatepickerProps> & {\n    Calendar: typeof DatepickerCalendar;\n    CalendarHeader: typeof DatepickerCalendarHeader;\n    CalendarHeaderAction: typeof DatepickerCalendarHeaderAction;\n    CalendarHeaderCell: typeof DatepickerCalendarHeaderCell;\n    CalendarCell: typeof DatepickerCalendarCell;\n  } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Datepicker.displayName, context.telemetry);\n  setStart();\n  const datepickerRef = React.useRef<HTMLElement>();\n  const [open, setOpen] = React.useState<boolean>(false);\n  const [selectedDate, setSelectedDate] = React.useState<Date | undefined>();\n  const valueFormatter = date => (date ? formatMonthDayYear(date, DEFAULT_LOCALIZED_STRINGS) : '');\n  const {\n    firstDayOfWeek,\n    firstWeekOfYear,\n    dateRangeType,\n    calendar,\n    popup,\n    className,\n    design,\n    styles,\n    variables,\n  } = props;\n  const calendarOptions: IDayGridOptions = {\n    selectedDate: selectedDate ?? props.today ?? new Date(),\n    navigatedDate: selectedDate ?? props.today ?? new Date(),\n    firstDayOfWeek,\n    firstWeekOfYear,\n    dateRangeType,\n  };\n\n  const showCalendarGrid = () => {\n    setOpen(true);\n  };\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Datepicker.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: Datepicker.displayName,\n    actionHandlers: {},\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<DatepickerStylesProps>(Datepicker.displayName, {\n    className: datepickerClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const overrideDatepickerCalendarProps = (predefinedProps: DatepickerCalendarProps): DatepickerCalendarProps => ({\n    ...calendarOptions,\n    onDateChange: (e, itemProps) => {\n      setSelectedDate(itemProps.value.originalDate);\n      setOpen(false);\n      _.invoke(predefinedProps, 'onDateChange', e, itemProps);\n    },\n  });\n\n  const calendarElement = createShorthand(DatepickerCalendar, calendar, {\n    defaultProps: () => getA11yProps('calendar', {}),\n    overrideProps: overrideDatepickerCalendarProps,\n  });\n\n  const element = (\n    <Ref innerRef={datepickerRef}>\n      {getA11yProps.unstable_wrapWithFocusZone(\n        <ElementType\n          {...getA11yProps('root', {\n            className: classes.root,\n            ...unhandledProps,\n          })}\n        >\n          <Input readOnly onClick={showCalendarGrid} value={valueFormatter(selectedDate)} />\n          {createShorthand(Popup, popup, {\n            defaultProps: () => ({\n              open,\n              content: calendarElement,\n              trapFocus: true,\n              trigger: <Button icon={<CalendarIcon />} title=\"Open calendar\" iconOnly />,\n            }),\n            overrideProps: (predefinedProps: PopupProps): PopupProps => ({\n              onOpenChange: (e, { open }) => {\n                setOpen(open);\n                _.invoke(predefinedProps, 'onOpenChange', e, { open });\n              },\n            }),\n          })}\n        </ElementType>,\n      )}\n    </Ref>\n  );\n  setEnd();\n  return element;\n};\n\nDatepicker.displayName = 'Datepicker';\n\nDatepicker.propTypes = {\n  ...commonPropTypes.createCommon(),\n  calendar: customPropTypes.itemShorthand,\n  popup: customPropTypes.itemShorthand,\n\n  minDate: PropTypes.instanceOf(Date),\n  maxDate: PropTypes.instanceOf(Date),\n  restrictedDates: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n\n  firstDayOfWeek: PropTypes.oneOf(Object.keys(DayOfWeek).map(name => DayOfWeek[name])),\n  firstWeekOfYear: PropTypes.oneOf(Object.keys(FirstWeekOfYear).map(name => FirstWeekOfYear[name])),\n  dateRangeType: PropTypes.oneOf(Object.keys(DateRangeType).map(name => DateRangeType[name])),\n  daysToSelectInDayView: PropTypes.number,\n  today: PropTypes.instanceOf(Date),\n  showWeekNumbers: PropTypes.bool,\n  workWeekDays: PropTypes.arrayOf(PropTypes.oneOf(Object.keys(DayOfWeek).map(name => DayOfWeek[name]))),\n\n  localizedStrings: PropTypes.object as PropTypes.Validator<IDateGridStrings>,\n\n  format: PropTypes.func,\n  parse: PropTypes.func,\n\n  disabled: PropTypes.bool,\n  isRequired: PropTypes.bool,\n  onDateChange: PropTypes.func,\n  goToToday: PropTypes.string,\n  placeholder: PropTypes.string,\n};\n\nDatepicker.defaultProps = {\n  accessibility: datepickerBehavior,\n  calendar: {},\n  popup: {},\n  firstDayOfWeek: DayOfWeek.Monday,\n  firstWeekOfYear: FirstWeekOfYear.FirstDay,\n  dateRangeType: DateRangeType.Day,\n};\n\nDatepicker.handledProps = Object.keys(Datepicker.propTypes) as any;\n\nDatepicker.create = createShorthandFactory({ Component: Datepicker });\n\nDatepicker.Calendar = DatepickerCalendar;\nDatepicker.CalendarHeader = DatepickerCalendarHeader;\nDatepicker.CalendarHeaderAction = DatepickerCalendarHeaderAction;\nDatepicker.CalendarHeaderCell = DatepickerCalendarHeaderCell;\nDatepicker.CalendarCell = DatepickerCalendarCell;\n"],"file":"Datepicker.js"}