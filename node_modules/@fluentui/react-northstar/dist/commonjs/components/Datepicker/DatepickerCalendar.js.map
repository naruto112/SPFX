{"version":3,"sources":["components/Datepicker/DatepickerCalendar.tsx"],"names":["DEFAULT_CALENDAR_LOCALIZED_STRINGS","months","shortMonths","days","shortDays","datepickerCalendarClassName","DatepickerCalendar","props","context","displayName","telemetry","setStart","setEnd","datepickerCalendarRef","React","useRef","className","design","styles","variables","calendarHeaderCell","calendarCell","header","selectedDate","navigatedDate","firstDayOfWeek","firstWeekOfYear","dateRangeType","weeksToShow","localizedStrings","today","onDateChange","ElementType","unhandledProps","handledProps","getA11yProps","accessibility","debugName","actionHandlers","rtl","normalizedSelectedDate","Date","useState","gridNavigatedDate","setGridNavigatedDate","mapPropsToInlineStyles","classes","getSlicedGrid","gridOptions","grid","slice","length","changeMonth","nextMonth","updatedGridNavigatedDate","element","unstable_wrapWithFocusZone","root","DatepickerCalendarHeader","defaultProps","label","overrideProps","predefinedProps","onPreviousClick","e","data","onNextClick","DAYS_IN_WEEK","dayNumber","DatepickerCalendarHeaderCell","content","key","week","day","DatepickerCalendarCell","date","originalDate","primary","isSelected","disabled","isInMonth","onClick","value","propTypes","commonPropTypes","createCommon","customPropTypes","itemShorthand","PropTypes","func","object","instanceOf","minDate","maxDate","restrictedDates","arrayOf","oneOf","Object","keys","DayOfWeek","map","name","FirstWeekOfYear","DateRangeType","daysToSelectInDayView","number","showWeekNumbers","bool","workWeekDays","format","parse","datepickerCalendarBehavior","Monday","FirstDay","Day"],"mappings":"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","sourcesContent":["import { Accessibility, datepickerCalendarBehavior, DatepickerCalendarBehaviorProps } from '@fluentui/accessibility';\nimport {\n  addMonths,\n  DateRangeType,\n  DayOfWeek,\n  DAYS_IN_WEEK,\n  FirstWeekOfYear,\n  formatMonthDayYear,\n  formatMonthYear,\n  getDayGrid,\n  IDateGridStrings,\n  IDay,\n  IRestrictedDatesOptions,\n} from '@fluentui/date-time-utilities';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { ComponentEventHandler, FluentComponentStaticProps, ShorthandValue } from '../../types';\nimport { commonPropTypes, createShorthand, UIComponentProps } from '../../utils';\nimport { Grid } from '../Grid/Grid';\nimport { DatepickerCalendarHeader, DatepickerCalendarHeaderProps } from './DatepickerCalendarHeader';\nimport { DatepickerCalendarCellProps, DatepickerCalendarCell } from './DatepickerCalendarCell';\nimport { DatepickerCalendarHeaderCellProps, DatepickerCalendarHeaderCell } from './DatepickerCalendarHeaderCell';\n\n// TODO: extract to date-time-utilities\nexport const DEFAULT_CALENDAR_LOCALIZED_STRINGS: IDateGridStrings = {\n  months: [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ],\n  shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  shortDays: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n};\n\n// TODO: extract to date-time-utilities\nexport interface IDateCalendarFormatting {\n  /**\n   * Format the date according to specified function.\n   * Intended use case is localization.\n   */\n  format?: (date: Date) => string;\n\n  /**\n   * Parse date from string representation into Date type.\n   */\n  parse?: (date: string) => Date;\n}\n\n// TODO: extract to date-time-utilities\nexport interface IDatepickerCalendarOptions extends IRestrictedDatesOptions {\n  /**\n   * The first day of the week for your locale.\n   */\n  firstDayOfWeek?: DayOfWeek;\n\n  /**\n   * Defines when the first week of the year should start, FirstWeekOfYear.FirstDay,\n   * FirstWeekOfYear.FirstFullWeek or FirstWeekOfYear.FirstFourDayWeek are the possible values\n   */\n  firstWeekOfYear?: FirstWeekOfYear;\n\n  /**\n   * The date range type indicating how  many days should be selected as the user\n   * selects days\n   */\n  dateRangeType?: DateRangeType;\n\n  /**\n   * The number of days to select while dateRangeType === DateRangeType.Day. Used in order to have multi-day\n   * views.\n   */\n  daysToSelectInDayView?: number;\n\n  /**\n   * Value of today. If null, current time in client machine will be used.\n   */\n  today?: Date;\n\n  /**\n   * Whether the calendar should show the week number (weeks 1 to 53) before each week row\n   */\n  showWeekNumbers?: boolean;\n\n  /**\n   * The days that are selectable when `dateRangeType` is WorkWeek.\n   * If `dateRangeType` is not WorkWeek this property does nothing.\n   */\n  workWeekDays?: DayOfWeek[];\n}\n\nexport interface DatepickerCalendarProps extends IDatepickerCalendarOptions, IDateCalendarFormatting, UIComponentProps {\n  /** Calendar can have header. */\n  header?: ShorthandValue<DatepickerCalendarHeaderProps>;\n\n  /** A render function to customize how cells are rendered in the Calendar. */\n  calendarCell?: ShorthandValue<DatepickerCalendarCellProps>;\n\n  /** A render function to customize how header cells are rendered in the Calendar. */\n  calendarHeaderCell?: ShorthandValue<DatepickerCalendarHeaderCellProps>;\n\n  /**\n   * The currently selected date\n   */\n  selectedDate?: Date;\n  /**\n   * The currently navigated date\n   */\n  navigatedDate?: Date;\n\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<DatepickerCalendarBehaviorProps>;\n\n  /**\n   * Called on change of the date.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onDateChange?: ComponentEventHandler<DatepickerCalendarProps & { value: IDay }>;\n\n  /** Localized labels */\n  localizedStrings?: IDateGridStrings;\n}\n\nexport type DatepickerCalendarStylesProps = never;\n\nexport const datepickerCalendarClassName = 'ui-datepicker__calendar';\n\n/**\n * A DatepickerCalendar is used to display dates in sematically grouped way.\n */\nexport const DatepickerCalendar: ComponentWithAs<'div', DatepickerCalendarProps> &\n  FluentComponentStaticProps<DatepickerCalendarProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(DatepickerCalendar.displayName, context.telemetry);\n  setStart();\n  const datepickerCalendarRef = React.useRef<HTMLElement>();\n\n  const {\n    className,\n    design,\n    styles,\n    variables,\n    calendarHeaderCell,\n    calendarCell,\n    header,\n    selectedDate,\n    navigatedDate,\n    firstDayOfWeek,\n    firstWeekOfYear,\n    dateRangeType,\n    weeksToShow,\n    localizedStrings,\n    today,\n    onDateChange,\n  } = props;\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(DatepickerCalendar.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: DatepickerCalendar.displayName,\n    actionHandlers: {},\n    rtl: context.rtl,\n  });\n  const normalizedSelectedDate = selectedDate || today || new Date();\n\n  const [gridNavigatedDate, setGridNavigatedDate] = React.useState<Date>(navigatedDate || today || new Date());\n\n  const { classes } = useStyles<DatepickerCalendarStylesProps>(DatepickerCalendar.displayName, {\n    className: datepickerCalendarClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  /** Get days grid and slice it in case it contains additional weeks at the beginning and end. */\n  const getSlicedGrid = () => {\n    const gridOptions = {\n      selectedDate: normalizedSelectedDate,\n      navigatedDate: gridNavigatedDate,\n      firstDayOfWeek,\n      firstWeekOfYear,\n      dateRangeType,\n    };\n    const grid = getDayGrid(gridOptions);\n    if (!weeksToShow) {\n      // Slicing because grid contains extra 1 week in the front and in the back.\n      return grid.slice(1, grid.length - 1);\n    }\n    return grid;\n  };\n\n  const grid = getSlicedGrid();\n\n  const changeMonth = (nextMonth: boolean) => {\n    const updatedGridNavigatedDate = addMonths(gridNavigatedDate, nextMonth ? 1 : -1);\n    setGridNavigatedDate(updatedGridNavigatedDate);\n  };\n\n  const element = (\n    <Ref innerRef={datepickerCalendarRef}>\n      {getA11yProps.unstable_wrapWithFocusZone(\n        <ElementType\n          {...getA11yProps('root', {\n            className: classes.root,\n            ...unhandledProps,\n          })}\n        >\n          {createShorthand(DatepickerCalendarHeader, header, {\n            defaultProps: () => ({\n              label: formatMonthYear(gridNavigatedDate, localizedStrings),\n            }),\n            overrideProps: (predefinedProps: DatepickerCalendarHeaderProps): DatepickerCalendarHeaderProps => ({\n              onPreviousClick: (e, data) => {\n                changeMonth(false);\n                _.invoke(predefinedProps, 'onPreviousClick', e, data);\n              },\n              onNextClick: (e, data) => {\n                changeMonth(true);\n                _.invoke(predefinedProps, 'onNextClick', e, data);\n              },\n            }),\n          })}\n          <Grid rows={grid.length + 1} columns={DAYS_IN_WEEK}>\n            {_.times(DAYS_IN_WEEK, dayNumber =>\n              createShorthand(DatepickerCalendarHeaderCell, calendarHeaderCell, {\n                defaultProps: () =>\n                  getA11yProps('calendarHeaderCell', {\n                    content: localizedStrings.shortDays[(dayNumber + firstDayOfWeek) % DAYS_IN_WEEK],\n                    key: dayNumber,\n                  }),\n              }),\n            )}\n            {_.map(grid, week =>\n              _.map(week, (day: IDay) =>\n                createShorthand(DatepickerCalendarCell, calendarCell, {\n                  defaultProps: () =>\n                    getA11yProps('calendarCell', {\n                      content: day.date,\n                      key: day.key,\n                      'aria-label': formatMonthDayYear(day.originalDate, localizedStrings),\n                      primary: day.isSelected,\n                      disabled: !day.isInMonth,\n                    }),\n                  overrideProps: (predefinedProps: DatepickerCalendarCellProps): DatepickerCalendarCellProps => ({\n                    onClick: e => {\n                      onDateChange(e, { ...predefinedProps, value: day });\n                      _.invoke(predefinedProps, 'onClick', e, { ...predefinedProps, value: day });\n                    },\n                  }),\n                }),\n              ),\n            )}\n          </Grid>\n        </ElementType>,\n      )}\n    </Ref>\n  );\n  setEnd();\n  return element;\n};\n\nDatepickerCalendar.displayName = 'DatepickerCalendar';\n\nDatepickerCalendar.propTypes = {\n  ...commonPropTypes.createCommon(),\n  calendarCell: customPropTypes.itemShorthand,\n  calendarHeaderCell: customPropTypes.itemShorthand,\n  header: customPropTypes.itemShorthand,\n  onDateChange: PropTypes.func,\n  localizedStrings: PropTypes.object as PropTypes.Validator<IDateGridStrings>,\n  selectedDate: PropTypes.instanceOf(Date),\n  navigatedDate: PropTypes.instanceOf(Date),\n\n  minDate: PropTypes.instanceOf(Date),\n  maxDate: PropTypes.instanceOf(Date),\n  restrictedDates: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n\n  firstDayOfWeek: PropTypes.oneOf(Object.keys(DayOfWeek).map(name => DayOfWeek[name])),\n  firstWeekOfYear: PropTypes.oneOf(Object.keys(FirstWeekOfYear).map(name => FirstWeekOfYear[name])),\n  dateRangeType: PropTypes.oneOf(Object.keys(DateRangeType).map(name => DateRangeType[name])),\n  daysToSelectInDayView: PropTypes.number,\n  today: PropTypes.instanceOf(Date),\n  showWeekNumbers: PropTypes.bool,\n  workWeekDays: PropTypes.arrayOf(PropTypes.oneOf(Object.keys(DayOfWeek).map(name => DayOfWeek[name]))),\n\n  format: PropTypes.func,\n  parse: PropTypes.func,\n};\n\nDatepickerCalendar.defaultProps = {\n  accessibility: datepickerCalendarBehavior,\n  firstDayOfWeek: DayOfWeek.Monday,\n  firstWeekOfYear: FirstWeekOfYear.FirstDay,\n  dateRangeType: DateRangeType.Day,\n  header: {},\n  calendarCell: {},\n  calendarHeaderCell: {},\n  localizedStrings: DEFAULT_CALENDAR_LOCALIZED_STRINGS,\n};\n\nDatepickerCalendar.handledProps = Object.keys(DatepickerCalendar.propTypes) as any;\n"],"file":"DatepickerCalendar.js"}