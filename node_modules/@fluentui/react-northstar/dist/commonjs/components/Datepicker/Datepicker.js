"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.Datepicker = exports.datepickerClassName = exports.DEFAULT_LOCALIZED_STRINGS = void 0;

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@fluentui/accessibility");

var _dateTimeUtilities = require("@fluentui/date-time-utilities");

var _reactBindings = require("@fluentui/react-bindings");

var _reactComponentRef = require("@fluentui/react-component-ref");

var _reactIconsNorthstar = require("@fluentui/react-icons-northstar");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _Button = require("../Button/Button");

var _Input = require("../Input/Input");

var _Popup = require("../Popup/Popup");

var _DatepickerCalendar = require("./DatepickerCalendar");

var _DatepickerCalendarCell = require("./DatepickerCalendarCell");

var _DatepickerCalendarHeader = require("./DatepickerCalendarHeader");

var _DatepickerCalendarHeaderAction = require("./DatepickerCalendarHeaderAction");

var _DatepickerCalendarHeaderCell = require("./DatepickerCalendarHeaderCell");

// TODO: extract to date-time-utilities
var DEFAULT_LOCALIZED_STRINGS = {
  months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
  shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
  days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
  shortDays: ['S', 'M', 'T', 'W', 'T', 'F', 'S']
}; // TODO: extract to date-time-utilities

exports.DEFAULT_LOCALIZED_STRINGS = DEFAULT_LOCALIZED_STRINGS;
var datepickerClassName = 'ui-datepicker';
/**
 * A Datepicker is used to display dates.
 * This component is currently UNSTABLE!
 */

exports.datepickerClassName = datepickerClassName;

var Datepicker = function Datepicker(props) {
  var _ref, _ref2;

  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(Datepicker.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var datepickerRef = React.useRef();

  var _React$useState = React.useState(false),
      open = _React$useState[0],
      setOpen = _React$useState[1];

  var _React$useState2 = React.useState(),
      selectedDate = _React$useState2[0],
      setSelectedDate = _React$useState2[1];

  var valueFormatter = function valueFormatter(date) {
    return date ? (0, _dateTimeUtilities.formatMonthDayYear)(date, DEFAULT_LOCALIZED_STRINGS) : '';
  };

  var firstDayOfWeek = props.firstDayOfWeek,
      firstWeekOfYear = props.firstWeekOfYear,
      dateRangeType = props.dateRangeType,
      calendar = props.calendar,
      popup = props.popup,
      className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables;
  var calendarOptions = {
    selectedDate: (_ref = selectedDate != null ? selectedDate : props.today) != null ? _ref : new Date(),
    navigatedDate: (_ref2 = selectedDate != null ? selectedDate : props.today) != null ? _ref2 : new Date(),
    firstDayOfWeek: firstDayOfWeek,
    firstWeekOfYear: firstWeekOfYear,
    dateRangeType: dateRangeType
  };

  var showCalendarGrid = function showCalendarGrid() {
    setOpen(true);
  };

  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(Datepicker.handledProps, props);
  var getA11yProps = (0, _reactBindings.useAccessibility)(props.accessibility, {
    debugName: Datepicker.displayName,
    actionHandlers: {},
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(Datepicker.displayName, {
    className: datepickerClassName,
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var overrideDatepickerCalendarProps = function overrideDatepickerCalendarProps(predefinedProps) {
    return Object.assign({}, calendarOptions, {
      onDateChange: function onDateChange(e, itemProps) {
        setSelectedDate(itemProps.value.originalDate);
        setOpen(false);
        (0, _invoke2.default)(predefinedProps, 'onDateChange', e, itemProps);
      }
    });
  };

  var calendarElement = (0, _utils.createShorthand)(_DatepickerCalendar.DatepickerCalendar, calendar, {
    defaultProps: function defaultProps() {
      return getA11yProps('calendar', {});
    },
    overrideProps: overrideDatepickerCalendarProps
  });
  var element = /*#__PURE__*/React.createElement(_reactComponentRef.Ref, {
    innerRef: datepickerRef
  }, getA11yProps.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
    className: classes.root
  }, unhandledProps)), /*#__PURE__*/React.createElement(_Input.Input, {
    readOnly: true,
    onClick: showCalendarGrid,
    value: valueFormatter(selectedDate)
  }), (0, _utils.createShorthand)(_Popup.Popup, popup, {
    defaultProps: function defaultProps() {
      return {
        open: open,
        content: calendarElement,
        trapFocus: true,
        trigger: /*#__PURE__*/React.createElement(_Button.Button, {
          icon: /*#__PURE__*/React.createElement(_reactIconsNorthstar.CalendarIcon, null),
          title: "Open calendar",
          iconOnly: true
        })
      };
    },
    overrideProps: function overrideProps(predefinedProps) {
      return {
        onOpenChange: function onOpenChange(e, _ref3) {
          var open = _ref3.open;
          setOpen(open);
          (0, _invoke2.default)(predefinedProps, 'onOpenChange', e, {
            open: open
          });
        }
      };
    }
  }))));
  setEnd();
  return element;
};

exports.Datepicker = Datepicker;
Datepicker.displayName = 'Datepicker';
Datepicker.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon(), {
  calendar: customPropTypes.itemShorthand,
  popup: customPropTypes.itemShorthand,
  minDate: PropTypes.instanceOf(Date),
  maxDate: PropTypes.instanceOf(Date),
  restrictedDates: PropTypes.arrayOf(PropTypes.instanceOf(Date)),
  firstDayOfWeek: PropTypes.oneOf(Object.keys(_dateTimeUtilities.DayOfWeek).map(function (name) {
    return _dateTimeUtilities.DayOfWeek[name];
  })),
  firstWeekOfYear: PropTypes.oneOf(Object.keys(_dateTimeUtilities.FirstWeekOfYear).map(function (name) {
    return _dateTimeUtilities.FirstWeekOfYear[name];
  })),
  dateRangeType: PropTypes.oneOf(Object.keys(_dateTimeUtilities.DateRangeType).map(function (name) {
    return _dateTimeUtilities.DateRangeType[name];
  })),
  daysToSelectInDayView: PropTypes.number,
  today: PropTypes.instanceOf(Date),
  showWeekNumbers: PropTypes.bool,
  workWeekDays: PropTypes.arrayOf(PropTypes.oneOf(Object.keys(_dateTimeUtilities.DayOfWeek).map(function (name) {
    return _dateTimeUtilities.DayOfWeek[name];
  }))),
  localizedStrings: PropTypes.object,
  format: PropTypes.func,
  parse: PropTypes.func,
  disabled: PropTypes.bool,
  isRequired: PropTypes.bool,
  onDateChange: PropTypes.func,
  goToToday: PropTypes.string,
  placeholder: PropTypes.string
});
Datepicker.defaultProps = {
  accessibility: _accessibility.datepickerBehavior,
  calendar: {},
  popup: {},
  firstDayOfWeek: _dateTimeUtilities.DayOfWeek.Monday,
  firstWeekOfYear: _dateTimeUtilities.FirstWeekOfYear.FirstDay,
  dateRangeType: _dateTimeUtilities.DateRangeType.Day
};
Datepicker.handledProps = Object.keys(Datepicker.propTypes);
Datepicker.create = (0, _utils.createShorthandFactory)({
  Component: Datepicker
});
Datepicker.Calendar = _DatepickerCalendar.DatepickerCalendar;
Datepicker.CalendarHeader = _DatepickerCalendarHeader.DatepickerCalendarHeader;
Datepicker.CalendarHeaderAction = _DatepickerCalendarHeaderAction.DatepickerCalendarHeaderAction;
Datepicker.CalendarHeaderCell = _DatepickerCalendarHeaderCell.DatepickerCalendarHeaderCell;
Datepicker.CalendarCell = _DatepickerCalendarCell.DatepickerCalendarCell;
//# sourceMappingURL=Datepicker.js.map
