"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.DatepickerCalendarHeader = exports.datepickerCalendarHeaderClassName = void 0;

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var React = _interopRequireWildcard(require("react"));

var _accessibility = require("@fluentui/accessibility");

var _reactBindings = require("@fluentui/react-bindings");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var _utils = require("../../utils");

var _DatepickerCalendarHeaderAction = require("./DatepickerCalendarHeaderAction");

var _Text = require("../Text/Text");

var datepickerCalendarHeaderClassName = 'ui-datepicker__calendarheader';
/**
 * A DatepickerCalendarHeader is used to display header block above calendar grid.
 * This component is currently UNSTABLE!
 */

exports.datepickerCalendarHeaderClassName = datepickerCalendarHeaderClassName;

var DatepickerCalendarHeader = function DatepickerCalendarHeader(props) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(DatepickerCalendarHeader.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables,
      label = props.label,
      nextButton = props.nextButton,
      previousButton = props.previousButton,
      onPreviousClick = props.onPreviousClick,
      onNextClick = props.onNextClick;
  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(DatepickerCalendarHeader.handledProps, props);
  var getA11yProps = (0, _reactBindings.useAccessibility)(props.accessibility, {
    debugName: DatepickerCalendarHeader.displayName,
    actionHandlers: {},
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(DatepickerCalendarHeader.displayName, {
    className: datepickerCalendarHeaderClassName,
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
    className: classes.root
  }, unhandledProps)), (0, _utils.createShorthand)(_Text.Text, label), (0, _utils.createShorthand)(_DatepickerCalendarHeaderAction.DatepickerCalendarHeaderAction, previousButton, {
    defaultProps: function defaultProps() {
      return getA11yProps('previousButton', {
        icon: {},
        // TODO: use value from `localizationStrings` after #14058 implements needed values
        title: 'Previous Month',
        direction: 'previous'
      });
    },
    overrideProps: function overrideProps(predefinedProps) {
      return {
        onClick: function onClick(e, data) {
          onPreviousClick(e, data);
          (0, _invoke2.default)(predefinedProps, 'onClick', e, data);
        }
      };
    }
  }), (0, _utils.createShorthand)(_DatepickerCalendarHeaderAction.DatepickerCalendarHeaderAction, nextButton, {
    defaultProps: function defaultProps() {
      return getA11yProps('nextButton', {
        icon: {},
        // TODO: use value from `localizationStrings` after #14058 implements needed values
        title: 'Next Month',
        direction: 'next'
      });
    },
    overrideProps: function overrideProps(predefinedProps) {
      return {
        onClick: function onClick(e, data) {
          onNextClick(e, data);
          (0, _invoke2.default)(predefinedProps, 'onClick', e, data);
        }
      };
    }
  }));
  setEnd();
  return element;
};

exports.DatepickerCalendarHeader = DatepickerCalendarHeader;
DatepickerCalendarHeader.displayName = 'DatepickerCalendarHeader';
DatepickerCalendarHeader.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon(), {
  label: customPropTypes.itemShorthand,
  localizedStrings: PropTypes.object,
  nextButton: customPropTypes.itemShorthand,
  previousButton: customPropTypes.itemShorthand,
  onPreviousClick: PropTypes.func,
  onNextClick: PropTypes.func
});
DatepickerCalendarHeader.defaultProps = {
  accessibility: _accessibility.datepickerCalendarHeaderBehavior,
  nextButton: {},
  previousButton: {},
  label: {}
};
DatepickerCalendarHeader.handledProps = Object.keys(DatepickerCalendarHeader.propTypes);
DatepickerCalendarHeader.create = (0, _utils.createShorthandFactory)({
  Component: DatepickerCalendarHeader
});
//# sourceMappingURL=DatepickerCalendarHeader.js.map
